Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ERROR

Grammar

Rule 0     S' -> program
Rule 1     program -> declist MAIN LRB RRB block
Rule 2     declist -> <empty>
Rule 3     declist -> declist dec
Rule 4     dec -> vardec
Rule 5     vardec -> idlist COLON type SEMICOLON
Rule 6     type -> INTEGER
Rule 7     type -> FLOAT
Rule 8     type -> BOOLEAN
Rule 9     iddec -> ID
Rule 10    iddec -> ID ASSIGN exp
Rule 11    iddec -> ID LSB exp RSB
Rule 12    idlist -> iddec
Rule 13    idlist -> idlist COMMA iddec
Rule 14    exp -> ID ASSIGN exp
Rule 15    exp -> exp SUM exp
Rule 16    exp -> exp SUB exp
Rule 17    exp -> exp DIV exp
Rule 18    exp -> exp MOD exp
Rule 19    exp -> exp MUL exp
Rule 20    exp -> const
Rule 21    exp -> ID
Rule 22    exp -> ID LSB exp RSB
Rule 23    exp -> SUB exp
Rule 24    exp -> LRB exp RRB
Rule 25    const -> FLOATNUMBER
Rule 26    const -> INTEGERNUMBER
Rule 27    explist -> exp
Rule 28    explist -> explist COMMA exp
Rule 29    block -> LCB stmtlist RCB
Rule 30    stmtlist -> stmtlist stmt
Rule 31    stmtlist -> <empty>
Rule 32    stmt -> exp SEMICOLON
Rule 33    stmt -> block
Rule 34    stmt -> vardec
Rule 35    stmt -> PRINT LRB ID RRB SEMICOLON
Rule 36    dec -> funcdec
Rule 37    funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block
Rule 38    funcdec -> FUNCTION ID LRB paramdecs RRB block
Rule 39    paramdecs -> paramdecslist
Rule 40    paramdecs -> <empty>
Rule 41    paramdecslist -> paramdec
Rule 42    paramdecslist -> paramdecslist COMMA paramdec
Rule 43    paramdec -> ID COLON type
Rule 44    paramdec -> ID LSB RSB COLON type
Rule 45    case -> WHERE const COLON stmtlist
Rule 46    cases -> cases case
Rule 47    cases -> <empty>
Rule 48    stmt -> RETURN exp SEMICOLON
Rule 49    stmt -> WHILE LRB exp RRB stmt
Rule 50    stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON
Rule 51    stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
Rule 52    stmt -> FOR LRB ID IN ID RRB stmt
Rule 53    stmt -> IF LRB exp RRB stmt elseiflist
Rule 54    stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt
Rule 55    elseiflist -> elseiflist ELSEIF LRB exp RRB stmt
Rule 56    elseiflist -> <empty>
Rule 57    exp -> ID LSB exp RSB ASSIGN exp
Rule 58    exp -> exp AND exp
Rule 59    exp -> exp OR exp
Rule 60    exp -> exp GT exp
Rule 61    exp -> exp LT exp
Rule 62    exp -> exp NE exp
Rule 63    exp -> exp EQ exp
Rule 64    exp -> exp LE exp
Rule 65    exp -> exp GE exp
Rule 66    exp -> ID LRB explist RRB
Rule 67    exp -> ID LRB RRB
Rule 68    exp -> NOT exp
Rule 69    const -> TRUE
Rule 70    const -> FALSE

Terminals, with rules where they appear

AND                  : 58
ASSIGN               : 10 14 57
BOOLEAN              : 8
COLON                : 5 37 43 44 45
COMMA                : 13 28 42
DIV                  : 17
ELSE                 : 54
ELSEIF               : 55
EQ                   : 63
ERROR                : 
FALSE                : 70
FLOAT                : 7
FLOATNUMBER          : 25
FOR                  : 51 52
FUNCTION             : 37 38
GE                   : 65
GT                   : 60
ID                   : 9 10 11 14 21 22 35 37 38 43 44 52 52 57 66 67
IF                   : 53 54
IN                   : 52
INTEGER              : 6
INTEGERNUMBER        : 26
LCB                  : 29 50
LE                   : 64
LRB                  : 1 24 35 37 38 49 50 51 52 53 54 55 66 67
LSB                  : 11 22 44 57
LT                   : 61
MAIN                 : 1
MOD                  : 18
MUL                  : 19
NE                   : 62
NOT                  : 68
ON                   : 50
OR                   : 59
PRINT                : 35
RCB                  : 29 50
RETURN               : 48
RRB                  : 1 24 35 37 38 49 50 51 52 53 54 55 66 67
RSB                  : 11 22 44 57
SEMICOLON            : 5 32 35 48 50 51 51
SUB                  : 16 23
SUM                  : 15
TRUE                 : 69
WHERE                : 45
WHILE                : 49
error                : 

Nonterminals, with rules where they appear

block                : 1 33 37 38
case                 : 46
cases                : 46 50
const                : 20 45
dec                  : 3
declist              : 1 3
elseiflist           : 53 54 55
exp                  : 10 11 14 15 15 16 16 17 17 18 18 19 19 22 23 24 27 28 32 48 49 50 51 51 51 53 54 55 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 68
explist              : 28 66
funcdec              : 36
iddec                : 12 13
idlist               : 5 13
paramdec             : 41 42
paramdecs            : 37 38
paramdecslist        : 39 42
program              : 0
stmt                 : 30 49 51 52 53 54 54 55
stmtlist             : 29 30 45
type                 : 5 37 43 44
vardec               : 4 34

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declist MAIN LRB RRB block
    (2) declist -> .
    (3) declist -> . declist dec

    MAIN            reduce using rule 2 (declist -> .)
    FUNCTION        reduce using rule 2 (declist -> .)
    ID              reduce using rule 2 (declist -> .)

    program                        shift and go to state 1
    declist                        shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> declist . MAIN LRB RRB block
    (3) declist -> declist . dec
    (4) dec -> . vardec
    (36) dec -> . funcdec
    (5) vardec -> . idlist COLON type SEMICOLON
    (37) funcdec -> . FUNCTION ID LRB paramdecs RRB COLON type block
    (38) funcdec -> . FUNCTION ID LRB paramdecs RRB block
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (9) iddec -> . ID
    (10) iddec -> . ID ASSIGN exp
    (11) iddec -> . ID LSB exp RSB

    MAIN            shift and go to state 3
    FUNCTION        shift and go to state 8
    ID              shift and go to state 9

    dec                            shift and go to state 4
    vardec                         shift and go to state 5
    funcdec                        shift and go to state 6
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 3

    (1) program -> declist MAIN . LRB RRB block

    LRB             shift and go to state 11


state 4

    (3) declist -> declist dec .

    MAIN            reduce using rule 3 (declist -> declist dec .)
    FUNCTION        reduce using rule 3 (declist -> declist dec .)
    ID              reduce using rule 3 (declist -> declist dec .)


state 5

    (4) dec -> vardec .

    MAIN            reduce using rule 4 (dec -> vardec .)
    FUNCTION        reduce using rule 4 (dec -> vardec .)
    ID              reduce using rule 4 (dec -> vardec .)


state 6

    (36) dec -> funcdec .

    MAIN            reduce using rule 36 (dec -> funcdec .)
    FUNCTION        reduce using rule 36 (dec -> funcdec .)
    ID              reduce using rule 36 (dec -> funcdec .)


state 7

    (5) vardec -> idlist . COLON type SEMICOLON
    (13) idlist -> idlist . COMMA iddec

    COLON           shift and go to state 12
    COMMA           shift and go to state 13


state 8

    (37) funcdec -> FUNCTION . ID LRB paramdecs RRB COLON type block
    (38) funcdec -> FUNCTION . ID LRB paramdecs RRB block

    ID              shift and go to state 14


state 9

    (9) iddec -> ID .
    (10) iddec -> ID . ASSIGN exp
    (11) iddec -> ID . LSB exp RSB

    COLON           reduce using rule 9 (iddec -> ID .)
    COMMA           reduce using rule 9 (iddec -> ID .)
    ASSIGN          shift and go to state 15
    LSB             shift and go to state 16


state 10

    (12) idlist -> iddec .

    COLON           reduce using rule 12 (idlist -> iddec .)
    COMMA           reduce using rule 12 (idlist -> iddec .)


state 11

    (1) program -> declist MAIN LRB . RRB block

    RRB             shift and go to state 17


state 12

    (5) vardec -> idlist COLON . type SEMICOLON
    (6) type -> . INTEGER
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    BOOLEAN         shift and go to state 21

    type                           shift and go to state 18

state 13

    (13) idlist -> idlist COMMA . iddec
    (9) iddec -> . ID
    (10) iddec -> . ID ASSIGN exp
    (11) iddec -> . ID LSB exp RSB

    ID              shift and go to state 9

    iddec                          shift and go to state 22

state 14

    (37) funcdec -> FUNCTION ID . LRB paramdecs RRB COLON type block
    (38) funcdec -> FUNCTION ID . LRB paramdecs RRB block

    LRB             shift and go to state 23


state 15

    (10) iddec -> ID ASSIGN . exp
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 25
    const                          shift and go to state 27

state 16

    (11) iddec -> ID LSB . exp RSB
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 34
    const                          shift and go to state 27

state 17

    (1) program -> declist MAIN LRB RRB . block
    (29) block -> . LCB stmtlist RCB

    LCB             shift and go to state 36

    block                          shift and go to state 35

state 18

    (5) vardec -> idlist COLON type . SEMICOLON

    SEMICOLON       shift and go to state 37


state 19

    (6) type -> INTEGER .

    SEMICOLON       reduce using rule 6 (type -> INTEGER .)
    COMMA           reduce using rule 6 (type -> INTEGER .)
    RRB             reduce using rule 6 (type -> INTEGER .)
    LCB             reduce using rule 6 (type -> INTEGER .)


state 20

    (7) type -> FLOAT .

    SEMICOLON       reduce using rule 7 (type -> FLOAT .)
    COMMA           reduce using rule 7 (type -> FLOAT .)
    RRB             reduce using rule 7 (type -> FLOAT .)
    LCB             reduce using rule 7 (type -> FLOAT .)


state 21

    (8) type -> BOOLEAN .

    SEMICOLON       reduce using rule 8 (type -> BOOLEAN .)
    COMMA           reduce using rule 8 (type -> BOOLEAN .)
    RRB             reduce using rule 8 (type -> BOOLEAN .)
    LCB             reduce using rule 8 (type -> BOOLEAN .)


state 22

    (13) idlist -> idlist COMMA iddec .

    COLON           reduce using rule 13 (idlist -> idlist COMMA iddec .)
    COMMA           reduce using rule 13 (idlist -> idlist COMMA iddec .)


state 23

    (37) funcdec -> FUNCTION ID LRB . paramdecs RRB COLON type block
    (38) funcdec -> FUNCTION ID LRB . paramdecs RRB block
    (39) paramdecs -> . paramdecslist
    (40) paramdecs -> .
    (41) paramdecslist -> . paramdec
    (42) paramdecslist -> . paramdecslist COMMA paramdec
    (43) paramdec -> . ID COLON type
    (44) paramdec -> . ID LSB RSB COLON type

    RRB             reduce using rule 40 (paramdecs -> .)
    ID              shift and go to state 38

    paramdecs                      shift and go to state 39
    paramdecslist                  shift and go to state 40
    paramdec                       shift and go to state 41

state 24

    (14) exp -> ID . ASSIGN exp
    (21) exp -> ID .
    (22) exp -> ID . LSB exp RSB
    (57) exp -> ID . LSB exp RSB ASSIGN exp
    (66) exp -> ID . LRB explist RRB
    (67) exp -> ID . LRB RRB

    ASSIGN          shift and go to state 42
    SUM             reduce using rule 21 (exp -> ID .)
    SUB             reduce using rule 21 (exp -> ID .)
    DIV             reduce using rule 21 (exp -> ID .)
    MOD             reduce using rule 21 (exp -> ID .)
    MUL             reduce using rule 21 (exp -> ID .)
    AND             reduce using rule 21 (exp -> ID .)
    OR              reduce using rule 21 (exp -> ID .)
    GT              reduce using rule 21 (exp -> ID .)
    LT              reduce using rule 21 (exp -> ID .)
    NE              reduce using rule 21 (exp -> ID .)
    EQ              reduce using rule 21 (exp -> ID .)
    LE              reduce using rule 21 (exp -> ID .)
    GE              reduce using rule 21 (exp -> ID .)
    COLON           reduce using rule 21 (exp -> ID .)
    COMMA           reduce using rule 21 (exp -> ID .)
    RSB             reduce using rule 21 (exp -> ID .)
    RRB             reduce using rule 21 (exp -> ID .)
    SEMICOLON       reduce using rule 21 (exp -> ID .)
    LSB             shift and go to state 43
    LRB             shift and go to state 44


state 25

    (10) iddec -> ID ASSIGN exp .
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    COLON           reduce using rule 10 (iddec -> ID ASSIGN exp .)
    COMMA           reduce using rule 10 (iddec -> ID ASSIGN exp .)
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    LE              shift and go to state 56
    GE              shift and go to state 57


state 26

    (23) exp -> SUB . exp
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 58
    const                          shift and go to state 27

state 27

    (20) exp -> const .

    SUM             reduce using rule 20 (exp -> const .)
    SUB             reduce using rule 20 (exp -> const .)
    DIV             reduce using rule 20 (exp -> const .)
    MOD             reduce using rule 20 (exp -> const .)
    MUL             reduce using rule 20 (exp -> const .)
    AND             reduce using rule 20 (exp -> const .)
    OR              reduce using rule 20 (exp -> const .)
    GT              reduce using rule 20 (exp -> const .)
    LT              reduce using rule 20 (exp -> const .)
    NE              reduce using rule 20 (exp -> const .)
    EQ              reduce using rule 20 (exp -> const .)
    LE              reduce using rule 20 (exp -> const .)
    GE              reduce using rule 20 (exp -> const .)
    COLON           reduce using rule 20 (exp -> const .)
    COMMA           reduce using rule 20 (exp -> const .)
    RSB             reduce using rule 20 (exp -> const .)
    RRB             reduce using rule 20 (exp -> const .)
    SEMICOLON       reduce using rule 20 (exp -> const .)


state 28

    (24) exp -> LRB . exp RRB
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 59
    const                          shift and go to state 27

state 29

    (68) exp -> NOT . exp
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 60
    const                          shift and go to state 27

state 30

    (25) const -> FLOATNUMBER .

    SUM             reduce using rule 25 (const -> FLOATNUMBER .)
    SUB             reduce using rule 25 (const -> FLOATNUMBER .)
    DIV             reduce using rule 25 (const -> FLOATNUMBER .)
    MOD             reduce using rule 25 (const -> FLOATNUMBER .)
    MUL             reduce using rule 25 (const -> FLOATNUMBER .)
    AND             reduce using rule 25 (const -> FLOATNUMBER .)
    OR              reduce using rule 25 (const -> FLOATNUMBER .)
    GT              reduce using rule 25 (const -> FLOATNUMBER .)
    LT              reduce using rule 25 (const -> FLOATNUMBER .)
    NE              reduce using rule 25 (const -> FLOATNUMBER .)
    EQ              reduce using rule 25 (const -> FLOATNUMBER .)
    LE              reduce using rule 25 (const -> FLOATNUMBER .)
    GE              reduce using rule 25 (const -> FLOATNUMBER .)
    COLON           reduce using rule 25 (const -> FLOATNUMBER .)
    COMMA           reduce using rule 25 (const -> FLOATNUMBER .)
    RSB             reduce using rule 25 (const -> FLOATNUMBER .)
    RRB             reduce using rule 25 (const -> FLOATNUMBER .)
    SEMICOLON       reduce using rule 25 (const -> FLOATNUMBER .)


state 31

    (26) const -> INTEGERNUMBER .

    SUM             reduce using rule 26 (const -> INTEGERNUMBER .)
    SUB             reduce using rule 26 (const -> INTEGERNUMBER .)
    DIV             reduce using rule 26 (const -> INTEGERNUMBER .)
    MOD             reduce using rule 26 (const -> INTEGERNUMBER .)
    MUL             reduce using rule 26 (const -> INTEGERNUMBER .)
    AND             reduce using rule 26 (const -> INTEGERNUMBER .)
    OR              reduce using rule 26 (const -> INTEGERNUMBER .)
    GT              reduce using rule 26 (const -> INTEGERNUMBER .)
    LT              reduce using rule 26 (const -> INTEGERNUMBER .)
    NE              reduce using rule 26 (const -> INTEGERNUMBER .)
    EQ              reduce using rule 26 (const -> INTEGERNUMBER .)
    LE              reduce using rule 26 (const -> INTEGERNUMBER .)
    GE              reduce using rule 26 (const -> INTEGERNUMBER .)
    COLON           reduce using rule 26 (const -> INTEGERNUMBER .)
    COMMA           reduce using rule 26 (const -> INTEGERNUMBER .)
    RSB             reduce using rule 26 (const -> INTEGERNUMBER .)
    RRB             reduce using rule 26 (const -> INTEGERNUMBER .)
    SEMICOLON       reduce using rule 26 (const -> INTEGERNUMBER .)


state 32

    (69) const -> TRUE .

    SUM             reduce using rule 69 (const -> TRUE .)
    SUB             reduce using rule 69 (const -> TRUE .)
    DIV             reduce using rule 69 (const -> TRUE .)
    MOD             reduce using rule 69 (const -> TRUE .)
    MUL             reduce using rule 69 (const -> TRUE .)
    AND             reduce using rule 69 (const -> TRUE .)
    OR              reduce using rule 69 (const -> TRUE .)
    GT              reduce using rule 69 (const -> TRUE .)
    LT              reduce using rule 69 (const -> TRUE .)
    NE              reduce using rule 69 (const -> TRUE .)
    EQ              reduce using rule 69 (const -> TRUE .)
    LE              reduce using rule 69 (const -> TRUE .)
    GE              reduce using rule 69 (const -> TRUE .)
    COLON           reduce using rule 69 (const -> TRUE .)
    COMMA           reduce using rule 69 (const -> TRUE .)
    RSB             reduce using rule 69 (const -> TRUE .)
    RRB             reduce using rule 69 (const -> TRUE .)
    SEMICOLON       reduce using rule 69 (const -> TRUE .)


state 33

    (70) const -> FALSE .

    SUM             reduce using rule 70 (const -> FALSE .)
    SUB             reduce using rule 70 (const -> FALSE .)
    DIV             reduce using rule 70 (const -> FALSE .)
    MOD             reduce using rule 70 (const -> FALSE .)
    MUL             reduce using rule 70 (const -> FALSE .)
    AND             reduce using rule 70 (const -> FALSE .)
    OR              reduce using rule 70 (const -> FALSE .)
    GT              reduce using rule 70 (const -> FALSE .)
    LT              reduce using rule 70 (const -> FALSE .)
    NE              reduce using rule 70 (const -> FALSE .)
    EQ              reduce using rule 70 (const -> FALSE .)
    LE              reduce using rule 70 (const -> FALSE .)
    GE              reduce using rule 70 (const -> FALSE .)
    COLON           reduce using rule 70 (const -> FALSE .)
    COMMA           reduce using rule 70 (const -> FALSE .)
    RSB             reduce using rule 70 (const -> FALSE .)
    RRB             reduce using rule 70 (const -> FALSE .)
    SEMICOLON       reduce using rule 70 (const -> FALSE .)


state 34

    (11) iddec -> ID LSB exp . RSB
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    RSB             shift and go to state 61
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    LE              shift and go to state 56
    GE              shift and go to state 57


state 35

    (1) program -> declist MAIN LRB RRB block .

    $end            reduce using rule 1 (program -> declist MAIN LRB RRB block .)


state 36

    (29) block -> LCB . stmtlist RCB
    (30) stmtlist -> . stmtlist stmt
    (31) stmtlist -> .

    RCB             reduce using rule 31 (stmtlist -> .)
    PRINT           reduce using rule 31 (stmtlist -> .)
    RETURN          reduce using rule 31 (stmtlist -> .)
    WHILE           reduce using rule 31 (stmtlist -> .)
    ON              reduce using rule 31 (stmtlist -> .)
    FOR             reduce using rule 31 (stmtlist -> .)
    IF              reduce using rule 31 (stmtlist -> .)
    ID              reduce using rule 31 (stmtlist -> .)
    SUB             reduce using rule 31 (stmtlist -> .)
    LRB             reduce using rule 31 (stmtlist -> .)
    NOT             reduce using rule 31 (stmtlist -> .)
    LCB             reduce using rule 31 (stmtlist -> .)
    FLOATNUMBER     reduce using rule 31 (stmtlist -> .)
    INTEGERNUMBER   reduce using rule 31 (stmtlist -> .)
    TRUE            reduce using rule 31 (stmtlist -> .)
    FALSE           reduce using rule 31 (stmtlist -> .)

    stmtlist                       shift and go to state 62

state 37

    (5) vardec -> idlist COLON type SEMICOLON .

    MAIN            reduce using rule 5 (vardec -> idlist COLON type SEMICOLON .)
    FUNCTION        reduce using rule 5 (vardec -> idlist COLON type SEMICOLON .)
    ID              reduce using rule 5 (vardec -> idlist COLON type SEMICOLON .)
    RCB             reduce using rule 5 (vardec -> idlist COLON type SEMICOLON .)
    PRINT           reduce using rule 5 (vardec -> idlist COLON type SEMICOLON .)
    RETURN          reduce using rule 5 (vardec -> idlist COLON type SEMICOLON .)
    WHILE           reduce using rule 5 (vardec -> idlist COLON type SEMICOLON .)
    ON              reduce using rule 5 (vardec -> idlist COLON type SEMICOLON .)
    FOR             reduce using rule 5 (vardec -> idlist COLON type SEMICOLON .)
    IF              reduce using rule 5 (vardec -> idlist COLON type SEMICOLON .)
    SUB             reduce using rule 5 (vardec -> idlist COLON type SEMICOLON .)
    LRB             reduce using rule 5 (vardec -> idlist COLON type SEMICOLON .)
    NOT             reduce using rule 5 (vardec -> idlist COLON type SEMICOLON .)
    LCB             reduce using rule 5 (vardec -> idlist COLON type SEMICOLON .)
    FLOATNUMBER     reduce using rule 5 (vardec -> idlist COLON type SEMICOLON .)
    INTEGERNUMBER   reduce using rule 5 (vardec -> idlist COLON type SEMICOLON .)
    TRUE            reduce using rule 5 (vardec -> idlist COLON type SEMICOLON .)
    FALSE           reduce using rule 5 (vardec -> idlist COLON type SEMICOLON .)
    ELSE            reduce using rule 5 (vardec -> idlist COLON type SEMICOLON .)
    ELSEIF          reduce using rule 5 (vardec -> idlist COLON type SEMICOLON .)
    WHERE           reduce using rule 5 (vardec -> idlist COLON type SEMICOLON .)


state 38

    (43) paramdec -> ID . COLON type
    (44) paramdec -> ID . LSB RSB COLON type

    COLON           shift and go to state 63
    LSB             shift and go to state 64


state 39

    (37) funcdec -> FUNCTION ID LRB paramdecs . RRB COLON type block
    (38) funcdec -> FUNCTION ID LRB paramdecs . RRB block

    RRB             shift and go to state 65


state 40

    (39) paramdecs -> paramdecslist .
    (42) paramdecslist -> paramdecslist . COMMA paramdec

    RRB             reduce using rule 39 (paramdecs -> paramdecslist .)
    COMMA           shift and go to state 66


state 41

    (41) paramdecslist -> paramdec .

    COMMA           reduce using rule 41 (paramdecslist -> paramdec .)
    RRB             reduce using rule 41 (paramdecslist -> paramdec .)


state 42

    (14) exp -> ID ASSIGN . exp
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 67
    const                          shift and go to state 27

state 43

    (22) exp -> ID LSB . exp RSB
    (57) exp -> ID LSB . exp RSB ASSIGN exp
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 68
    const                          shift and go to state 27

state 44

    (66) exp -> ID LRB . explist RRB
    (67) exp -> ID LRB . RRB
    (27) explist -> . exp
    (28) explist -> . explist COMMA exp
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    RRB             shift and go to state 70
    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    explist                        shift and go to state 69
    exp                            shift and go to state 71
    const                          shift and go to state 27

state 45

    (15) exp -> exp SUM . exp
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 72
    const                          shift and go to state 27

state 46

    (16) exp -> exp SUB . exp
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 73
    const                          shift and go to state 27

state 47

    (17) exp -> exp DIV . exp
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 74
    const                          shift and go to state 27

state 48

    (18) exp -> exp MOD . exp
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 75
    const                          shift and go to state 27

state 49

    (19) exp -> exp MUL . exp
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 76
    const                          shift and go to state 27

state 50

    (58) exp -> exp AND . exp
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 77
    const                          shift and go to state 27

state 51

    (59) exp -> exp OR . exp
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 78
    const                          shift and go to state 27

state 52

    (60) exp -> exp GT . exp
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 79
    const                          shift and go to state 27

state 53

    (61) exp -> exp LT . exp
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 80
    const                          shift and go to state 27

state 54

    (62) exp -> exp NE . exp
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 81
    const                          shift and go to state 27

state 55

    (63) exp -> exp EQ . exp
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 82
    const                          shift and go to state 27

state 56

    (64) exp -> exp LE . exp
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 83
    const                          shift and go to state 27

state 57

    (65) exp -> exp GE . exp
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 84
    const                          shift and go to state 27

state 58

    (23) exp -> SUB exp .
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    SUM             reduce using rule 23 (exp -> SUB exp .)
    SUB             reduce using rule 23 (exp -> SUB exp .)
    MOD             reduce using rule 23 (exp -> SUB exp .)
    AND             reduce using rule 23 (exp -> SUB exp .)
    OR              reduce using rule 23 (exp -> SUB exp .)
    GT              reduce using rule 23 (exp -> SUB exp .)
    LT              reduce using rule 23 (exp -> SUB exp .)
    NE              reduce using rule 23 (exp -> SUB exp .)
    EQ              reduce using rule 23 (exp -> SUB exp .)
    LE              reduce using rule 23 (exp -> SUB exp .)
    GE              reduce using rule 23 (exp -> SUB exp .)
    COLON           reduce using rule 23 (exp -> SUB exp .)
    COMMA           reduce using rule 23 (exp -> SUB exp .)
    RSB             reduce using rule 23 (exp -> SUB exp .)
    RRB             reduce using rule 23 (exp -> SUB exp .)
    SEMICOLON       reduce using rule 23 (exp -> SUB exp .)
    DIV             shift and go to state 47
    MUL             shift and go to state 49

  ! DIV             [ reduce using rule 23 (exp -> SUB exp .) ]
  ! MUL             [ reduce using rule 23 (exp -> SUB exp .) ]
  ! SUM             [ shift and go to state 45 ]
  ! SUB             [ shift and go to state 46 ]
  ! MOD             [ shift and go to state 48 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]


state 59

    (24) exp -> LRB exp . RRB
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    RRB             shift and go to state 85
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    LE              shift and go to state 56
    GE              shift and go to state 57


state 60

    (68) exp -> NOT exp .
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    AND             reduce using rule 68 (exp -> NOT exp .)
    OR              reduce using rule 68 (exp -> NOT exp .)
    COLON           reduce using rule 68 (exp -> NOT exp .)
    COMMA           reduce using rule 68 (exp -> NOT exp .)
    RSB             reduce using rule 68 (exp -> NOT exp .)
    RRB             reduce using rule 68 (exp -> NOT exp .)
    SEMICOLON       reduce using rule 68 (exp -> NOT exp .)
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49
    GT              shift and go to state 52
    LT              shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    LE              shift and go to state 56
    GE              shift and go to state 57

  ! SUM             [ reduce using rule 68 (exp -> NOT exp .) ]
  ! SUB             [ reduce using rule 68 (exp -> NOT exp .) ]
  ! DIV             [ reduce using rule 68 (exp -> NOT exp .) ]
  ! MOD             [ reduce using rule 68 (exp -> NOT exp .) ]
  ! MUL             [ reduce using rule 68 (exp -> NOT exp .) ]
  ! GT              [ reduce using rule 68 (exp -> NOT exp .) ]
  ! LT              [ reduce using rule 68 (exp -> NOT exp .) ]
  ! NE              [ reduce using rule 68 (exp -> NOT exp .) ]
  ! EQ              [ reduce using rule 68 (exp -> NOT exp .) ]
  ! LE              [ reduce using rule 68 (exp -> NOT exp .) ]
  ! GE              [ reduce using rule 68 (exp -> NOT exp .) ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]


state 61

    (11) iddec -> ID LSB exp RSB .

    COLON           reduce using rule 11 (iddec -> ID LSB exp RSB .)
    COMMA           reduce using rule 11 (iddec -> ID LSB exp RSB .)


state 62

    (29) block -> LCB stmtlist . RCB
    (30) stmtlist -> stmtlist . stmt
    (32) stmt -> . exp SEMICOLON
    (33) stmt -> . block
    (34) stmt -> . vardec
    (35) stmt -> . PRINT LRB ID RRB SEMICOLON
    (48) stmt -> . RETURN exp SEMICOLON
    (49) stmt -> . WHILE LRB exp RRB stmt
    (50) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (51) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (52) stmt -> . FOR LRB ID IN ID RRB stmt
    (53) stmt -> . IF LRB exp RRB stmt elseiflist
    (54) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (29) block -> . LCB stmtlist RCB
    (5) vardec -> . idlist COLON type SEMICOLON
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (9) iddec -> . ID
    (10) iddec -> . ID ASSIGN exp
    (11) iddec -> . ID LSB exp RSB

    RCB             shift and go to state 86
    PRINT           shift and go to state 91
    RETURN          shift and go to state 93
    WHILE           shift and go to state 94
    ON              shift and go to state 95
    FOR             shift and go to state 96
    IF              shift and go to state 97
    ID              shift and go to state 92
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    LCB             shift and go to state 36
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    stmt                           shift and go to state 87
    exp                            shift and go to state 88
    block                          shift and go to state 89
    vardec                         shift and go to state 90
    const                          shift and go to state 27
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 63

    (43) paramdec -> ID COLON . type
    (6) type -> . INTEGER
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    BOOLEAN         shift and go to state 21

    type                           shift and go to state 98

state 64

    (44) paramdec -> ID LSB . RSB COLON type

    RSB             shift and go to state 99


state 65

    (37) funcdec -> FUNCTION ID LRB paramdecs RRB . COLON type block
    (38) funcdec -> FUNCTION ID LRB paramdecs RRB . block
    (29) block -> . LCB stmtlist RCB

    COLON           shift and go to state 100
    LCB             shift and go to state 36

    block                          shift and go to state 101

state 66

    (42) paramdecslist -> paramdecslist COMMA . paramdec
    (43) paramdec -> . ID COLON type
    (44) paramdec -> . ID LSB RSB COLON type

    ID              shift and go to state 38

    paramdec                       shift and go to state 102

state 67

    (14) exp -> ID ASSIGN exp .
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    AND             reduce using rule 14 (exp -> ID ASSIGN exp .)
    OR              reduce using rule 14 (exp -> ID ASSIGN exp .)
    GT              reduce using rule 14 (exp -> ID ASSIGN exp .)
    LT              reduce using rule 14 (exp -> ID ASSIGN exp .)
    NE              reduce using rule 14 (exp -> ID ASSIGN exp .)
    EQ              reduce using rule 14 (exp -> ID ASSIGN exp .)
    LE              reduce using rule 14 (exp -> ID ASSIGN exp .)
    GE              reduce using rule 14 (exp -> ID ASSIGN exp .)
    COLON           reduce using rule 14 (exp -> ID ASSIGN exp .)
    COMMA           reduce using rule 14 (exp -> ID ASSIGN exp .)
    RSB             reduce using rule 14 (exp -> ID ASSIGN exp .)
    RRB             reduce using rule 14 (exp -> ID ASSIGN exp .)
    SEMICOLON       reduce using rule 14 (exp -> ID ASSIGN exp .)
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49

  ! SUM             [ reduce using rule 14 (exp -> ID ASSIGN exp .) ]
  ! SUB             [ reduce using rule 14 (exp -> ID ASSIGN exp .) ]
  ! DIV             [ reduce using rule 14 (exp -> ID ASSIGN exp .) ]
  ! MOD             [ reduce using rule 14 (exp -> ID ASSIGN exp .) ]
  ! MUL             [ reduce using rule 14 (exp -> ID ASSIGN exp .) ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]


state 68

    (22) exp -> ID LSB exp . RSB
    (57) exp -> ID LSB exp . RSB ASSIGN exp
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    RSB             shift and go to state 103
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    LE              shift and go to state 56
    GE              shift and go to state 57


state 69

    (66) exp -> ID LRB explist . RRB
    (28) explist -> explist . COMMA exp

    RRB             shift and go to state 104
    COMMA           shift and go to state 105


state 70

    (67) exp -> ID LRB RRB .

    SUM             reduce using rule 67 (exp -> ID LRB RRB .)
    SUB             reduce using rule 67 (exp -> ID LRB RRB .)
    DIV             reduce using rule 67 (exp -> ID LRB RRB .)
    MOD             reduce using rule 67 (exp -> ID LRB RRB .)
    MUL             reduce using rule 67 (exp -> ID LRB RRB .)
    AND             reduce using rule 67 (exp -> ID LRB RRB .)
    OR              reduce using rule 67 (exp -> ID LRB RRB .)
    GT              reduce using rule 67 (exp -> ID LRB RRB .)
    LT              reduce using rule 67 (exp -> ID LRB RRB .)
    NE              reduce using rule 67 (exp -> ID LRB RRB .)
    EQ              reduce using rule 67 (exp -> ID LRB RRB .)
    LE              reduce using rule 67 (exp -> ID LRB RRB .)
    GE              reduce using rule 67 (exp -> ID LRB RRB .)
    COLON           reduce using rule 67 (exp -> ID LRB RRB .)
    COMMA           reduce using rule 67 (exp -> ID LRB RRB .)
    RSB             reduce using rule 67 (exp -> ID LRB RRB .)
    RRB             reduce using rule 67 (exp -> ID LRB RRB .)
    SEMICOLON       reduce using rule 67 (exp -> ID LRB RRB .)


state 71

    (27) explist -> exp .
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    RRB             reduce using rule 27 (explist -> exp .)
    COMMA           reduce using rule 27 (explist -> exp .)
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    LE              shift and go to state 56
    GE              shift and go to state 57


state 72

    (15) exp -> exp SUM exp .
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    SUM             reduce using rule 15 (exp -> exp SUM exp .)
    SUB             reduce using rule 15 (exp -> exp SUM exp .)
    MOD             reduce using rule 15 (exp -> exp SUM exp .)
    AND             reduce using rule 15 (exp -> exp SUM exp .)
    OR              reduce using rule 15 (exp -> exp SUM exp .)
    GT              reduce using rule 15 (exp -> exp SUM exp .)
    LT              reduce using rule 15 (exp -> exp SUM exp .)
    NE              reduce using rule 15 (exp -> exp SUM exp .)
    EQ              reduce using rule 15 (exp -> exp SUM exp .)
    LE              reduce using rule 15 (exp -> exp SUM exp .)
    GE              reduce using rule 15 (exp -> exp SUM exp .)
    COLON           reduce using rule 15 (exp -> exp SUM exp .)
    COMMA           reduce using rule 15 (exp -> exp SUM exp .)
    RSB             reduce using rule 15 (exp -> exp SUM exp .)
    RRB             reduce using rule 15 (exp -> exp SUM exp .)
    SEMICOLON       reduce using rule 15 (exp -> exp SUM exp .)
    DIV             shift and go to state 47
    MUL             shift and go to state 49

  ! DIV             [ reduce using rule 15 (exp -> exp SUM exp .) ]
  ! MUL             [ reduce using rule 15 (exp -> exp SUM exp .) ]
  ! SUM             [ shift and go to state 45 ]
  ! SUB             [ shift and go to state 46 ]
  ! MOD             [ shift and go to state 48 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]


state 73

    (16) exp -> exp SUB exp .
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    SUM             reduce using rule 16 (exp -> exp SUB exp .)
    SUB             reduce using rule 16 (exp -> exp SUB exp .)
    MOD             reduce using rule 16 (exp -> exp SUB exp .)
    AND             reduce using rule 16 (exp -> exp SUB exp .)
    OR              reduce using rule 16 (exp -> exp SUB exp .)
    GT              reduce using rule 16 (exp -> exp SUB exp .)
    LT              reduce using rule 16 (exp -> exp SUB exp .)
    NE              reduce using rule 16 (exp -> exp SUB exp .)
    EQ              reduce using rule 16 (exp -> exp SUB exp .)
    LE              reduce using rule 16 (exp -> exp SUB exp .)
    GE              reduce using rule 16 (exp -> exp SUB exp .)
    COLON           reduce using rule 16 (exp -> exp SUB exp .)
    COMMA           reduce using rule 16 (exp -> exp SUB exp .)
    RSB             reduce using rule 16 (exp -> exp SUB exp .)
    RRB             reduce using rule 16 (exp -> exp SUB exp .)
    SEMICOLON       reduce using rule 16 (exp -> exp SUB exp .)
    DIV             shift and go to state 47
    MUL             shift and go to state 49

  ! DIV             [ reduce using rule 16 (exp -> exp SUB exp .) ]
  ! MUL             [ reduce using rule 16 (exp -> exp SUB exp .) ]
  ! SUM             [ shift and go to state 45 ]
  ! SUB             [ shift and go to state 46 ]
  ! MOD             [ shift and go to state 48 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]


state 74

    (17) exp -> exp DIV exp .
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    SUM             reduce using rule 17 (exp -> exp DIV exp .)
    SUB             reduce using rule 17 (exp -> exp DIV exp .)
    DIV             reduce using rule 17 (exp -> exp DIV exp .)
    MOD             reduce using rule 17 (exp -> exp DIV exp .)
    MUL             reduce using rule 17 (exp -> exp DIV exp .)
    AND             reduce using rule 17 (exp -> exp DIV exp .)
    OR              reduce using rule 17 (exp -> exp DIV exp .)
    GT              reduce using rule 17 (exp -> exp DIV exp .)
    LT              reduce using rule 17 (exp -> exp DIV exp .)
    NE              reduce using rule 17 (exp -> exp DIV exp .)
    EQ              reduce using rule 17 (exp -> exp DIV exp .)
    LE              reduce using rule 17 (exp -> exp DIV exp .)
    GE              reduce using rule 17 (exp -> exp DIV exp .)
    COLON           reduce using rule 17 (exp -> exp DIV exp .)
    COMMA           reduce using rule 17 (exp -> exp DIV exp .)
    RSB             reduce using rule 17 (exp -> exp DIV exp .)
    RRB             reduce using rule 17 (exp -> exp DIV exp .)
    SEMICOLON       reduce using rule 17 (exp -> exp DIV exp .)

  ! SUM             [ shift and go to state 45 ]
  ! SUB             [ shift and go to state 46 ]
  ! DIV             [ shift and go to state 47 ]
  ! MOD             [ shift and go to state 48 ]
  ! MUL             [ shift and go to state 49 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]


state 75

    (18) exp -> exp MOD exp .
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    MOD             reduce using rule 18 (exp -> exp MOD exp .)
    AND             reduce using rule 18 (exp -> exp MOD exp .)
    OR              reduce using rule 18 (exp -> exp MOD exp .)
    GT              reduce using rule 18 (exp -> exp MOD exp .)
    LT              reduce using rule 18 (exp -> exp MOD exp .)
    NE              reduce using rule 18 (exp -> exp MOD exp .)
    EQ              reduce using rule 18 (exp -> exp MOD exp .)
    LE              reduce using rule 18 (exp -> exp MOD exp .)
    GE              reduce using rule 18 (exp -> exp MOD exp .)
    COLON           reduce using rule 18 (exp -> exp MOD exp .)
    COMMA           reduce using rule 18 (exp -> exp MOD exp .)
    RSB             reduce using rule 18 (exp -> exp MOD exp .)
    RRB             reduce using rule 18 (exp -> exp MOD exp .)
    SEMICOLON       reduce using rule 18 (exp -> exp MOD exp .)
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MUL             shift and go to state 49

  ! SUM             [ reduce using rule 18 (exp -> exp MOD exp .) ]
  ! SUB             [ reduce using rule 18 (exp -> exp MOD exp .) ]
  ! DIV             [ reduce using rule 18 (exp -> exp MOD exp .) ]
  ! MUL             [ reduce using rule 18 (exp -> exp MOD exp .) ]
  ! MOD             [ shift and go to state 48 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]


state 76

    (19) exp -> exp MUL exp .
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    SUM             reduce using rule 19 (exp -> exp MUL exp .)
    SUB             reduce using rule 19 (exp -> exp MUL exp .)
    DIV             reduce using rule 19 (exp -> exp MUL exp .)
    MOD             reduce using rule 19 (exp -> exp MUL exp .)
    MUL             reduce using rule 19 (exp -> exp MUL exp .)
    AND             reduce using rule 19 (exp -> exp MUL exp .)
    OR              reduce using rule 19 (exp -> exp MUL exp .)
    GT              reduce using rule 19 (exp -> exp MUL exp .)
    LT              reduce using rule 19 (exp -> exp MUL exp .)
    NE              reduce using rule 19 (exp -> exp MUL exp .)
    EQ              reduce using rule 19 (exp -> exp MUL exp .)
    LE              reduce using rule 19 (exp -> exp MUL exp .)
    GE              reduce using rule 19 (exp -> exp MUL exp .)
    COLON           reduce using rule 19 (exp -> exp MUL exp .)
    COMMA           reduce using rule 19 (exp -> exp MUL exp .)
    RSB             reduce using rule 19 (exp -> exp MUL exp .)
    RRB             reduce using rule 19 (exp -> exp MUL exp .)
    SEMICOLON       reduce using rule 19 (exp -> exp MUL exp .)

  ! SUM             [ shift and go to state 45 ]
  ! SUB             [ shift and go to state 46 ]
  ! DIV             [ shift and go to state 47 ]
  ! MOD             [ shift and go to state 48 ]
  ! MUL             [ shift and go to state 49 ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]


state 77

    (58) exp -> exp AND exp .
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    AND             reduce using rule 58 (exp -> exp AND exp .)
    OR              reduce using rule 58 (exp -> exp AND exp .)
    COLON           reduce using rule 58 (exp -> exp AND exp .)
    COMMA           reduce using rule 58 (exp -> exp AND exp .)
    RSB             reduce using rule 58 (exp -> exp AND exp .)
    RRB             reduce using rule 58 (exp -> exp AND exp .)
    SEMICOLON       reduce using rule 58 (exp -> exp AND exp .)
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49
    GT              shift and go to state 52
    LT              shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    LE              shift and go to state 56
    GE              shift and go to state 57

  ! SUM             [ reduce using rule 58 (exp -> exp AND exp .) ]
  ! SUB             [ reduce using rule 58 (exp -> exp AND exp .) ]
  ! DIV             [ reduce using rule 58 (exp -> exp AND exp .) ]
  ! MOD             [ reduce using rule 58 (exp -> exp AND exp .) ]
  ! MUL             [ reduce using rule 58 (exp -> exp AND exp .) ]
  ! GT              [ reduce using rule 58 (exp -> exp AND exp .) ]
  ! LT              [ reduce using rule 58 (exp -> exp AND exp .) ]
  ! NE              [ reduce using rule 58 (exp -> exp AND exp .) ]
  ! EQ              [ reduce using rule 58 (exp -> exp AND exp .) ]
  ! LE              [ reduce using rule 58 (exp -> exp AND exp .) ]
  ! GE              [ reduce using rule 58 (exp -> exp AND exp .) ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]


state 78

    (59) exp -> exp OR exp .
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    OR              reduce using rule 59 (exp -> exp OR exp .)
    COLON           reduce using rule 59 (exp -> exp OR exp .)
    COMMA           reduce using rule 59 (exp -> exp OR exp .)
    RSB             reduce using rule 59 (exp -> exp OR exp .)
    RRB             reduce using rule 59 (exp -> exp OR exp .)
    SEMICOLON       reduce using rule 59 (exp -> exp OR exp .)
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49
    AND             shift and go to state 50
    GT              shift and go to state 52
    LT              shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    LE              shift and go to state 56
    GE              shift and go to state 57

  ! SUM             [ reduce using rule 59 (exp -> exp OR exp .) ]
  ! SUB             [ reduce using rule 59 (exp -> exp OR exp .) ]
  ! DIV             [ reduce using rule 59 (exp -> exp OR exp .) ]
  ! MOD             [ reduce using rule 59 (exp -> exp OR exp .) ]
  ! MUL             [ reduce using rule 59 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 59 (exp -> exp OR exp .) ]
  ! GT              [ reduce using rule 59 (exp -> exp OR exp .) ]
  ! LT              [ reduce using rule 59 (exp -> exp OR exp .) ]
  ! NE              [ reduce using rule 59 (exp -> exp OR exp .) ]
  ! EQ              [ reduce using rule 59 (exp -> exp OR exp .) ]
  ! LE              [ reduce using rule 59 (exp -> exp OR exp .) ]
  ! GE              [ reduce using rule 59 (exp -> exp OR exp .) ]
  ! OR              [ shift and go to state 51 ]


state 79

    (60) exp -> exp GT exp .
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    AND             reduce using rule 60 (exp -> exp GT exp .)
    OR              reduce using rule 60 (exp -> exp GT exp .)
    GT              reduce using rule 60 (exp -> exp GT exp .)
    LT              reduce using rule 60 (exp -> exp GT exp .)
    NE              reduce using rule 60 (exp -> exp GT exp .)
    EQ              reduce using rule 60 (exp -> exp GT exp .)
    LE              reduce using rule 60 (exp -> exp GT exp .)
    GE              reduce using rule 60 (exp -> exp GT exp .)
    COLON           reduce using rule 60 (exp -> exp GT exp .)
    COMMA           reduce using rule 60 (exp -> exp GT exp .)
    RSB             reduce using rule 60 (exp -> exp GT exp .)
    RRB             reduce using rule 60 (exp -> exp GT exp .)
    SEMICOLON       reduce using rule 60 (exp -> exp GT exp .)
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49

  ! SUM             [ reduce using rule 60 (exp -> exp GT exp .) ]
  ! SUB             [ reduce using rule 60 (exp -> exp GT exp .) ]
  ! DIV             [ reduce using rule 60 (exp -> exp GT exp .) ]
  ! MOD             [ reduce using rule 60 (exp -> exp GT exp .) ]
  ! MUL             [ reduce using rule 60 (exp -> exp GT exp .) ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]


state 80

    (61) exp -> exp LT exp .
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    AND             reduce using rule 61 (exp -> exp LT exp .)
    OR              reduce using rule 61 (exp -> exp LT exp .)
    GT              reduce using rule 61 (exp -> exp LT exp .)
    LT              reduce using rule 61 (exp -> exp LT exp .)
    NE              reduce using rule 61 (exp -> exp LT exp .)
    EQ              reduce using rule 61 (exp -> exp LT exp .)
    LE              reduce using rule 61 (exp -> exp LT exp .)
    GE              reduce using rule 61 (exp -> exp LT exp .)
    COLON           reduce using rule 61 (exp -> exp LT exp .)
    COMMA           reduce using rule 61 (exp -> exp LT exp .)
    RSB             reduce using rule 61 (exp -> exp LT exp .)
    RRB             reduce using rule 61 (exp -> exp LT exp .)
    SEMICOLON       reduce using rule 61 (exp -> exp LT exp .)
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49

  ! SUM             [ reduce using rule 61 (exp -> exp LT exp .) ]
  ! SUB             [ reduce using rule 61 (exp -> exp LT exp .) ]
  ! DIV             [ reduce using rule 61 (exp -> exp LT exp .) ]
  ! MOD             [ reduce using rule 61 (exp -> exp LT exp .) ]
  ! MUL             [ reduce using rule 61 (exp -> exp LT exp .) ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]


state 81

    (62) exp -> exp NE exp .
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    AND             reduce using rule 62 (exp -> exp NE exp .)
    OR              reduce using rule 62 (exp -> exp NE exp .)
    GT              reduce using rule 62 (exp -> exp NE exp .)
    LT              reduce using rule 62 (exp -> exp NE exp .)
    NE              reduce using rule 62 (exp -> exp NE exp .)
    EQ              reduce using rule 62 (exp -> exp NE exp .)
    LE              reduce using rule 62 (exp -> exp NE exp .)
    GE              reduce using rule 62 (exp -> exp NE exp .)
    COLON           reduce using rule 62 (exp -> exp NE exp .)
    COMMA           reduce using rule 62 (exp -> exp NE exp .)
    RSB             reduce using rule 62 (exp -> exp NE exp .)
    RRB             reduce using rule 62 (exp -> exp NE exp .)
    SEMICOLON       reduce using rule 62 (exp -> exp NE exp .)
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49

  ! SUM             [ reduce using rule 62 (exp -> exp NE exp .) ]
  ! SUB             [ reduce using rule 62 (exp -> exp NE exp .) ]
  ! DIV             [ reduce using rule 62 (exp -> exp NE exp .) ]
  ! MOD             [ reduce using rule 62 (exp -> exp NE exp .) ]
  ! MUL             [ reduce using rule 62 (exp -> exp NE exp .) ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]


state 82

    (63) exp -> exp EQ exp .
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    AND             reduce using rule 63 (exp -> exp EQ exp .)
    OR              reduce using rule 63 (exp -> exp EQ exp .)
    GT              reduce using rule 63 (exp -> exp EQ exp .)
    LT              reduce using rule 63 (exp -> exp EQ exp .)
    NE              reduce using rule 63 (exp -> exp EQ exp .)
    EQ              reduce using rule 63 (exp -> exp EQ exp .)
    LE              reduce using rule 63 (exp -> exp EQ exp .)
    GE              reduce using rule 63 (exp -> exp EQ exp .)
    COLON           reduce using rule 63 (exp -> exp EQ exp .)
    COMMA           reduce using rule 63 (exp -> exp EQ exp .)
    RSB             reduce using rule 63 (exp -> exp EQ exp .)
    RRB             reduce using rule 63 (exp -> exp EQ exp .)
    SEMICOLON       reduce using rule 63 (exp -> exp EQ exp .)
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49

  ! SUM             [ reduce using rule 63 (exp -> exp EQ exp .) ]
  ! SUB             [ reduce using rule 63 (exp -> exp EQ exp .) ]
  ! DIV             [ reduce using rule 63 (exp -> exp EQ exp .) ]
  ! MOD             [ reduce using rule 63 (exp -> exp EQ exp .) ]
  ! MUL             [ reduce using rule 63 (exp -> exp EQ exp .) ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]


state 83

    (64) exp -> exp LE exp .
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    AND             reduce using rule 64 (exp -> exp LE exp .)
    OR              reduce using rule 64 (exp -> exp LE exp .)
    GT              reduce using rule 64 (exp -> exp LE exp .)
    LT              reduce using rule 64 (exp -> exp LE exp .)
    NE              reduce using rule 64 (exp -> exp LE exp .)
    EQ              reduce using rule 64 (exp -> exp LE exp .)
    LE              reduce using rule 64 (exp -> exp LE exp .)
    GE              reduce using rule 64 (exp -> exp LE exp .)
    COLON           reduce using rule 64 (exp -> exp LE exp .)
    COMMA           reduce using rule 64 (exp -> exp LE exp .)
    RSB             reduce using rule 64 (exp -> exp LE exp .)
    RRB             reduce using rule 64 (exp -> exp LE exp .)
    SEMICOLON       reduce using rule 64 (exp -> exp LE exp .)
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49

  ! SUM             [ reduce using rule 64 (exp -> exp LE exp .) ]
  ! SUB             [ reduce using rule 64 (exp -> exp LE exp .) ]
  ! DIV             [ reduce using rule 64 (exp -> exp LE exp .) ]
  ! MOD             [ reduce using rule 64 (exp -> exp LE exp .) ]
  ! MUL             [ reduce using rule 64 (exp -> exp LE exp .) ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]


state 84

    (65) exp -> exp GE exp .
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    AND             reduce using rule 65 (exp -> exp GE exp .)
    OR              reduce using rule 65 (exp -> exp GE exp .)
    GT              reduce using rule 65 (exp -> exp GE exp .)
    LT              reduce using rule 65 (exp -> exp GE exp .)
    NE              reduce using rule 65 (exp -> exp GE exp .)
    EQ              reduce using rule 65 (exp -> exp GE exp .)
    LE              reduce using rule 65 (exp -> exp GE exp .)
    GE              reduce using rule 65 (exp -> exp GE exp .)
    COLON           reduce using rule 65 (exp -> exp GE exp .)
    COMMA           reduce using rule 65 (exp -> exp GE exp .)
    RSB             reduce using rule 65 (exp -> exp GE exp .)
    RRB             reduce using rule 65 (exp -> exp GE exp .)
    SEMICOLON       reduce using rule 65 (exp -> exp GE exp .)
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49

  ! SUM             [ reduce using rule 65 (exp -> exp GE exp .) ]
  ! SUB             [ reduce using rule 65 (exp -> exp GE exp .) ]
  ! DIV             [ reduce using rule 65 (exp -> exp GE exp .) ]
  ! MOD             [ reduce using rule 65 (exp -> exp GE exp .) ]
  ! MUL             [ reduce using rule 65 (exp -> exp GE exp .) ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]


state 85

    (24) exp -> LRB exp RRB .

    SUM             reduce using rule 24 (exp -> LRB exp RRB .)
    SUB             reduce using rule 24 (exp -> LRB exp RRB .)
    DIV             reduce using rule 24 (exp -> LRB exp RRB .)
    MOD             reduce using rule 24 (exp -> LRB exp RRB .)
    MUL             reduce using rule 24 (exp -> LRB exp RRB .)
    AND             reduce using rule 24 (exp -> LRB exp RRB .)
    OR              reduce using rule 24 (exp -> LRB exp RRB .)
    GT              reduce using rule 24 (exp -> LRB exp RRB .)
    LT              reduce using rule 24 (exp -> LRB exp RRB .)
    NE              reduce using rule 24 (exp -> LRB exp RRB .)
    EQ              reduce using rule 24 (exp -> LRB exp RRB .)
    LE              reduce using rule 24 (exp -> LRB exp RRB .)
    GE              reduce using rule 24 (exp -> LRB exp RRB .)
    COLON           reduce using rule 24 (exp -> LRB exp RRB .)
    COMMA           reduce using rule 24 (exp -> LRB exp RRB .)
    RSB             reduce using rule 24 (exp -> LRB exp RRB .)
    RRB             reduce using rule 24 (exp -> LRB exp RRB .)
    SEMICOLON       reduce using rule 24 (exp -> LRB exp RRB .)


state 86

    (29) block -> LCB stmtlist RCB .

    $end            reduce using rule 29 (block -> LCB stmtlist RCB .)
    RCB             reduce using rule 29 (block -> LCB stmtlist RCB .)
    PRINT           reduce using rule 29 (block -> LCB stmtlist RCB .)
    RETURN          reduce using rule 29 (block -> LCB stmtlist RCB .)
    WHILE           reduce using rule 29 (block -> LCB stmtlist RCB .)
    ON              reduce using rule 29 (block -> LCB stmtlist RCB .)
    FOR             reduce using rule 29 (block -> LCB stmtlist RCB .)
    IF              reduce using rule 29 (block -> LCB stmtlist RCB .)
    ID              reduce using rule 29 (block -> LCB stmtlist RCB .)
    SUB             reduce using rule 29 (block -> LCB stmtlist RCB .)
    LRB             reduce using rule 29 (block -> LCB stmtlist RCB .)
    NOT             reduce using rule 29 (block -> LCB stmtlist RCB .)
    LCB             reduce using rule 29 (block -> LCB stmtlist RCB .)
    FLOATNUMBER     reduce using rule 29 (block -> LCB stmtlist RCB .)
    INTEGERNUMBER   reduce using rule 29 (block -> LCB stmtlist RCB .)
    TRUE            reduce using rule 29 (block -> LCB stmtlist RCB .)
    FALSE           reduce using rule 29 (block -> LCB stmtlist RCB .)
    MAIN            reduce using rule 29 (block -> LCB stmtlist RCB .)
    FUNCTION        reduce using rule 29 (block -> LCB stmtlist RCB .)
    ELSE            reduce using rule 29 (block -> LCB stmtlist RCB .)
    ELSEIF          reduce using rule 29 (block -> LCB stmtlist RCB .)
    WHERE           reduce using rule 29 (block -> LCB stmtlist RCB .)


state 87

    (30) stmtlist -> stmtlist stmt .

    RCB             reduce using rule 30 (stmtlist -> stmtlist stmt .)
    PRINT           reduce using rule 30 (stmtlist -> stmtlist stmt .)
    RETURN          reduce using rule 30 (stmtlist -> stmtlist stmt .)
    WHILE           reduce using rule 30 (stmtlist -> stmtlist stmt .)
    ON              reduce using rule 30 (stmtlist -> stmtlist stmt .)
    FOR             reduce using rule 30 (stmtlist -> stmtlist stmt .)
    IF              reduce using rule 30 (stmtlist -> stmtlist stmt .)
    ID              reduce using rule 30 (stmtlist -> stmtlist stmt .)
    SUB             reduce using rule 30 (stmtlist -> stmtlist stmt .)
    LRB             reduce using rule 30 (stmtlist -> stmtlist stmt .)
    NOT             reduce using rule 30 (stmtlist -> stmtlist stmt .)
    LCB             reduce using rule 30 (stmtlist -> stmtlist stmt .)
    FLOATNUMBER     reduce using rule 30 (stmtlist -> stmtlist stmt .)
    INTEGERNUMBER   reduce using rule 30 (stmtlist -> stmtlist stmt .)
    TRUE            reduce using rule 30 (stmtlist -> stmtlist stmt .)
    FALSE           reduce using rule 30 (stmtlist -> stmtlist stmt .)
    WHERE           reduce using rule 30 (stmtlist -> stmtlist stmt .)


state 88

    (32) stmt -> exp . SEMICOLON
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    SEMICOLON       shift and go to state 106
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    LE              shift and go to state 56
    GE              shift and go to state 57


state 89

    (33) stmt -> block .

    RCB             reduce using rule 33 (stmt -> block .)
    PRINT           reduce using rule 33 (stmt -> block .)
    RETURN          reduce using rule 33 (stmt -> block .)
    WHILE           reduce using rule 33 (stmt -> block .)
    ON              reduce using rule 33 (stmt -> block .)
    FOR             reduce using rule 33 (stmt -> block .)
    IF              reduce using rule 33 (stmt -> block .)
    ID              reduce using rule 33 (stmt -> block .)
    SUB             reduce using rule 33 (stmt -> block .)
    LRB             reduce using rule 33 (stmt -> block .)
    NOT             reduce using rule 33 (stmt -> block .)
    LCB             reduce using rule 33 (stmt -> block .)
    FLOATNUMBER     reduce using rule 33 (stmt -> block .)
    INTEGERNUMBER   reduce using rule 33 (stmt -> block .)
    TRUE            reduce using rule 33 (stmt -> block .)
    FALSE           reduce using rule 33 (stmt -> block .)
    ELSE            reduce using rule 33 (stmt -> block .)
    ELSEIF          reduce using rule 33 (stmt -> block .)
    WHERE           reduce using rule 33 (stmt -> block .)


state 90

    (34) stmt -> vardec .

    RCB             reduce using rule 34 (stmt -> vardec .)
    PRINT           reduce using rule 34 (stmt -> vardec .)
    RETURN          reduce using rule 34 (stmt -> vardec .)
    WHILE           reduce using rule 34 (stmt -> vardec .)
    ON              reduce using rule 34 (stmt -> vardec .)
    FOR             reduce using rule 34 (stmt -> vardec .)
    IF              reduce using rule 34 (stmt -> vardec .)
    ID              reduce using rule 34 (stmt -> vardec .)
    SUB             reduce using rule 34 (stmt -> vardec .)
    LRB             reduce using rule 34 (stmt -> vardec .)
    NOT             reduce using rule 34 (stmt -> vardec .)
    LCB             reduce using rule 34 (stmt -> vardec .)
    FLOATNUMBER     reduce using rule 34 (stmt -> vardec .)
    INTEGERNUMBER   reduce using rule 34 (stmt -> vardec .)
    TRUE            reduce using rule 34 (stmt -> vardec .)
    FALSE           reduce using rule 34 (stmt -> vardec .)
    ELSE            reduce using rule 34 (stmt -> vardec .)
    ELSEIF          reduce using rule 34 (stmt -> vardec .)
    WHERE           reduce using rule 34 (stmt -> vardec .)


state 91

    (35) stmt -> PRINT . LRB ID RRB SEMICOLON

    LRB             shift and go to state 107


state 92

    (14) exp -> ID . ASSIGN exp
    (21) exp -> ID .
    (22) exp -> ID . LSB exp RSB
    (57) exp -> ID . LSB exp RSB ASSIGN exp
    (66) exp -> ID . LRB explist RRB
    (67) exp -> ID . LRB RRB
    (9) iddec -> ID .
    (10) iddec -> ID . ASSIGN exp
    (11) iddec -> ID . LSB exp RSB

    ASSIGN          shift and go to state 108
    SEMICOLON       reduce using rule 21 (exp -> ID .)
    SUM             reduce using rule 21 (exp -> ID .)
    SUB             reduce using rule 21 (exp -> ID .)
    DIV             reduce using rule 21 (exp -> ID .)
    MOD             reduce using rule 21 (exp -> ID .)
    MUL             reduce using rule 21 (exp -> ID .)
    AND             reduce using rule 21 (exp -> ID .)
    OR              reduce using rule 21 (exp -> ID .)
    GT              reduce using rule 21 (exp -> ID .)
    LT              reduce using rule 21 (exp -> ID .)
    NE              reduce using rule 21 (exp -> ID .)
    EQ              reduce using rule 21 (exp -> ID .)
    LE              reduce using rule 21 (exp -> ID .)
    GE              reduce using rule 21 (exp -> ID .)
    LSB             shift and go to state 109
    LRB             shift and go to state 44
    COLON           reduce using rule 9 (iddec -> ID .)
    COMMA           reduce using rule 9 (iddec -> ID .)


state 93

    (48) stmt -> RETURN . exp SEMICOLON
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 110
    const                          shift and go to state 27

state 94

    (49) stmt -> WHILE . LRB exp RRB stmt

    LRB             shift and go to state 111


state 95

    (50) stmt -> ON . LRB exp RRB LCB cases RCB SEMICOLON

    LRB             shift and go to state 112


state 96

    (51) stmt -> FOR . LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (52) stmt -> FOR . LRB ID IN ID RRB stmt

    LRB             shift and go to state 113


state 97

    (53) stmt -> IF . LRB exp RRB stmt elseiflist
    (54) stmt -> IF . LRB exp RRB stmt elseiflist ELSE stmt

    LRB             shift and go to state 114


state 98

    (43) paramdec -> ID COLON type .

    COMMA           reduce using rule 43 (paramdec -> ID COLON type .)
    RRB             reduce using rule 43 (paramdec -> ID COLON type .)


state 99

    (44) paramdec -> ID LSB RSB . COLON type

    COLON           shift and go to state 115


state 100

    (37) funcdec -> FUNCTION ID LRB paramdecs RRB COLON . type block
    (6) type -> . INTEGER
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    BOOLEAN         shift and go to state 21

    type                           shift and go to state 116

state 101

    (38) funcdec -> FUNCTION ID LRB paramdecs RRB block .

    MAIN            reduce using rule 38 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    FUNCTION        reduce using rule 38 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    ID              reduce using rule 38 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)


state 102

    (42) paramdecslist -> paramdecslist COMMA paramdec .

    COMMA           reduce using rule 42 (paramdecslist -> paramdecslist COMMA paramdec .)
    RRB             reduce using rule 42 (paramdecslist -> paramdecslist COMMA paramdec .)


state 103

    (22) exp -> ID LSB exp RSB .
    (57) exp -> ID LSB exp RSB . ASSIGN exp

    SUM             reduce using rule 22 (exp -> ID LSB exp RSB .)
    SUB             reduce using rule 22 (exp -> ID LSB exp RSB .)
    DIV             reduce using rule 22 (exp -> ID LSB exp RSB .)
    MOD             reduce using rule 22 (exp -> ID LSB exp RSB .)
    MUL             reduce using rule 22 (exp -> ID LSB exp RSB .)
    AND             reduce using rule 22 (exp -> ID LSB exp RSB .)
    OR              reduce using rule 22 (exp -> ID LSB exp RSB .)
    GT              reduce using rule 22 (exp -> ID LSB exp RSB .)
    LT              reduce using rule 22 (exp -> ID LSB exp RSB .)
    NE              reduce using rule 22 (exp -> ID LSB exp RSB .)
    EQ              reduce using rule 22 (exp -> ID LSB exp RSB .)
    LE              reduce using rule 22 (exp -> ID LSB exp RSB .)
    GE              reduce using rule 22 (exp -> ID LSB exp RSB .)
    COLON           reduce using rule 22 (exp -> ID LSB exp RSB .)
    COMMA           reduce using rule 22 (exp -> ID LSB exp RSB .)
    RSB             reduce using rule 22 (exp -> ID LSB exp RSB .)
    RRB             reduce using rule 22 (exp -> ID LSB exp RSB .)
    SEMICOLON       reduce using rule 22 (exp -> ID LSB exp RSB .)
    ASSIGN          shift and go to state 117


state 104

    (66) exp -> ID LRB explist RRB .

    SUM             reduce using rule 66 (exp -> ID LRB explist RRB .)
    SUB             reduce using rule 66 (exp -> ID LRB explist RRB .)
    DIV             reduce using rule 66 (exp -> ID LRB explist RRB .)
    MOD             reduce using rule 66 (exp -> ID LRB explist RRB .)
    MUL             reduce using rule 66 (exp -> ID LRB explist RRB .)
    AND             reduce using rule 66 (exp -> ID LRB explist RRB .)
    OR              reduce using rule 66 (exp -> ID LRB explist RRB .)
    GT              reduce using rule 66 (exp -> ID LRB explist RRB .)
    LT              reduce using rule 66 (exp -> ID LRB explist RRB .)
    NE              reduce using rule 66 (exp -> ID LRB explist RRB .)
    EQ              reduce using rule 66 (exp -> ID LRB explist RRB .)
    LE              reduce using rule 66 (exp -> ID LRB explist RRB .)
    GE              reduce using rule 66 (exp -> ID LRB explist RRB .)
    COLON           reduce using rule 66 (exp -> ID LRB explist RRB .)
    COMMA           reduce using rule 66 (exp -> ID LRB explist RRB .)
    RSB             reduce using rule 66 (exp -> ID LRB explist RRB .)
    RRB             reduce using rule 66 (exp -> ID LRB explist RRB .)
    SEMICOLON       reduce using rule 66 (exp -> ID LRB explist RRB .)


state 105

    (28) explist -> explist COMMA . exp
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 118
    const                          shift and go to state 27

state 106

    (32) stmt -> exp SEMICOLON .

    RCB             reduce using rule 32 (stmt -> exp SEMICOLON .)
    PRINT           reduce using rule 32 (stmt -> exp SEMICOLON .)
    RETURN          reduce using rule 32 (stmt -> exp SEMICOLON .)
    WHILE           reduce using rule 32 (stmt -> exp SEMICOLON .)
    ON              reduce using rule 32 (stmt -> exp SEMICOLON .)
    FOR             reduce using rule 32 (stmt -> exp SEMICOLON .)
    IF              reduce using rule 32 (stmt -> exp SEMICOLON .)
    ID              reduce using rule 32 (stmt -> exp SEMICOLON .)
    SUB             reduce using rule 32 (stmt -> exp SEMICOLON .)
    LRB             reduce using rule 32 (stmt -> exp SEMICOLON .)
    NOT             reduce using rule 32 (stmt -> exp SEMICOLON .)
    LCB             reduce using rule 32 (stmt -> exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 32 (stmt -> exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 32 (stmt -> exp SEMICOLON .)
    TRUE            reduce using rule 32 (stmt -> exp SEMICOLON .)
    FALSE           reduce using rule 32 (stmt -> exp SEMICOLON .)
    ELSE            reduce using rule 32 (stmt -> exp SEMICOLON .)
    ELSEIF          reduce using rule 32 (stmt -> exp SEMICOLON .)
    WHERE           reduce using rule 32 (stmt -> exp SEMICOLON .)


state 107

    (35) stmt -> PRINT LRB . ID RRB SEMICOLON

    ID              shift and go to state 119


state 108

    (14) exp -> ID ASSIGN . exp
    (10) iddec -> ID ASSIGN . exp
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 120
    const                          shift and go to state 27

state 109

    (22) exp -> ID LSB . exp RSB
    (57) exp -> ID LSB . exp RSB ASSIGN exp
    (11) iddec -> ID LSB . exp RSB
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 121
    const                          shift and go to state 27

state 110

    (48) stmt -> RETURN exp . SEMICOLON
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    SEMICOLON       shift and go to state 122
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    LE              shift and go to state 56
    GE              shift and go to state 57


state 111

    (49) stmt -> WHILE LRB . exp RRB stmt
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 123
    const                          shift and go to state 27

state 112

    (50) stmt -> ON LRB . exp RRB LCB cases RCB SEMICOLON
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 124
    const                          shift and go to state 27

state 113

    (51) stmt -> FOR LRB . exp SEMICOLON exp SEMICOLON exp RRB stmt
    (52) stmt -> FOR LRB . ID IN ID RRB stmt
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 126
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 125
    const                          shift and go to state 27

state 114

    (53) stmt -> IF LRB . exp RRB stmt elseiflist
    (54) stmt -> IF LRB . exp RRB stmt elseiflist ELSE stmt
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 127
    const                          shift and go to state 27

state 115

    (44) paramdec -> ID LSB RSB COLON . type
    (6) type -> . INTEGER
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    BOOLEAN         shift and go to state 21

    type                           shift and go to state 128

state 116

    (37) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type . block
    (29) block -> . LCB stmtlist RCB

    LCB             shift and go to state 36

    block                          shift and go to state 129

state 117

    (57) exp -> ID LSB exp RSB ASSIGN . exp
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 130
    const                          shift and go to state 27

state 118

    (28) explist -> explist COMMA exp .
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    RRB             reduce using rule 28 (explist -> explist COMMA exp .)
    COMMA           reduce using rule 28 (explist -> explist COMMA exp .)
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    LE              shift and go to state 56
    GE              shift and go to state 57


state 119

    (35) stmt -> PRINT LRB ID . RRB SEMICOLON

    RRB             shift and go to state 131


state 120

    (14) exp -> ID ASSIGN exp .
    (10) iddec -> ID ASSIGN exp .
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    SEMICOLON       reduce using rule 14 (exp -> ID ASSIGN exp .)
    AND             reduce using rule 14 (exp -> ID ASSIGN exp .)
    OR              reduce using rule 14 (exp -> ID ASSIGN exp .)
    GT              reduce using rule 14 (exp -> ID ASSIGN exp .)
    LT              reduce using rule 14 (exp -> ID ASSIGN exp .)
    NE              reduce using rule 14 (exp -> ID ASSIGN exp .)
    EQ              reduce using rule 14 (exp -> ID ASSIGN exp .)
    LE              reduce using rule 14 (exp -> ID ASSIGN exp .)
    GE              reduce using rule 14 (exp -> ID ASSIGN exp .)
    COLON           reduce using rule 10 (iddec -> ID ASSIGN exp .)
    COMMA           reduce using rule 10 (iddec -> ID ASSIGN exp .)
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49

  ! SUM             [ reduce using rule 14 (exp -> ID ASSIGN exp .) ]
  ! SUB             [ reduce using rule 14 (exp -> ID ASSIGN exp .) ]
  ! DIV             [ reduce using rule 14 (exp -> ID ASSIGN exp .) ]
  ! MOD             [ reduce using rule 14 (exp -> ID ASSIGN exp .) ]
  ! MUL             [ reduce using rule 14 (exp -> ID ASSIGN exp .) ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]


state 121

    (22) exp -> ID LSB exp . RSB
    (57) exp -> ID LSB exp . RSB ASSIGN exp
    (11) iddec -> ID LSB exp . RSB
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    RSB             shift and go to state 132
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    LE              shift and go to state 56
    GE              shift and go to state 57


state 122

    (48) stmt -> RETURN exp SEMICOLON .

    RCB             reduce using rule 48 (stmt -> RETURN exp SEMICOLON .)
    PRINT           reduce using rule 48 (stmt -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 48 (stmt -> RETURN exp SEMICOLON .)
    WHILE           reduce using rule 48 (stmt -> RETURN exp SEMICOLON .)
    ON              reduce using rule 48 (stmt -> RETURN exp SEMICOLON .)
    FOR             reduce using rule 48 (stmt -> RETURN exp SEMICOLON .)
    IF              reduce using rule 48 (stmt -> RETURN exp SEMICOLON .)
    ID              reduce using rule 48 (stmt -> RETURN exp SEMICOLON .)
    SUB             reduce using rule 48 (stmt -> RETURN exp SEMICOLON .)
    LRB             reduce using rule 48 (stmt -> RETURN exp SEMICOLON .)
    NOT             reduce using rule 48 (stmt -> RETURN exp SEMICOLON .)
    LCB             reduce using rule 48 (stmt -> RETURN exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 48 (stmt -> RETURN exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 48 (stmt -> RETURN exp SEMICOLON .)
    TRUE            reduce using rule 48 (stmt -> RETURN exp SEMICOLON .)
    FALSE           reduce using rule 48 (stmt -> RETURN exp SEMICOLON .)
    ELSE            reduce using rule 48 (stmt -> RETURN exp SEMICOLON .)
    ELSEIF          reduce using rule 48 (stmt -> RETURN exp SEMICOLON .)
    WHERE           reduce using rule 48 (stmt -> RETURN exp SEMICOLON .)


state 123

    (49) stmt -> WHILE LRB exp . RRB stmt
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    RRB             shift and go to state 133
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    LE              shift and go to state 56
    GE              shift and go to state 57


state 124

    (50) stmt -> ON LRB exp . RRB LCB cases RCB SEMICOLON
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    RRB             shift and go to state 134
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    LE              shift and go to state 56
    GE              shift and go to state 57


state 125

    (51) stmt -> FOR LRB exp . SEMICOLON exp SEMICOLON exp RRB stmt
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    SEMICOLON       shift and go to state 135
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    LE              shift and go to state 56
    GE              shift and go to state 57


state 126

    (52) stmt -> FOR LRB ID . IN ID RRB stmt
    (14) exp -> ID . ASSIGN exp
    (21) exp -> ID .
    (22) exp -> ID . LSB exp RSB
    (57) exp -> ID . LSB exp RSB ASSIGN exp
    (66) exp -> ID . LRB explist RRB
    (67) exp -> ID . LRB RRB

    IN              shift and go to state 136
    ASSIGN          shift and go to state 42
    SEMICOLON       reduce using rule 21 (exp -> ID .)
    SUM             reduce using rule 21 (exp -> ID .)
    SUB             reduce using rule 21 (exp -> ID .)
    DIV             reduce using rule 21 (exp -> ID .)
    MOD             reduce using rule 21 (exp -> ID .)
    MUL             reduce using rule 21 (exp -> ID .)
    AND             reduce using rule 21 (exp -> ID .)
    OR              reduce using rule 21 (exp -> ID .)
    GT              reduce using rule 21 (exp -> ID .)
    LT              reduce using rule 21 (exp -> ID .)
    NE              reduce using rule 21 (exp -> ID .)
    EQ              reduce using rule 21 (exp -> ID .)
    LE              reduce using rule 21 (exp -> ID .)
    GE              reduce using rule 21 (exp -> ID .)
    LSB             shift and go to state 43
    LRB             shift and go to state 44


state 127

    (53) stmt -> IF LRB exp . RRB stmt elseiflist
    (54) stmt -> IF LRB exp . RRB stmt elseiflist ELSE stmt
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    RRB             shift and go to state 137
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    LE              shift and go to state 56
    GE              shift and go to state 57


state 128

    (44) paramdec -> ID LSB RSB COLON type .

    COMMA           reduce using rule 44 (paramdec -> ID LSB RSB COLON type .)
    RRB             reduce using rule 44 (paramdec -> ID LSB RSB COLON type .)


state 129

    (37) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .

    MAIN            reduce using rule 37 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    FUNCTION        reduce using rule 37 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    ID              reduce using rule 37 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)


state 130

    (57) exp -> ID LSB exp RSB ASSIGN exp .
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    AND             reduce using rule 57 (exp -> ID LSB exp RSB ASSIGN exp .)
    OR              reduce using rule 57 (exp -> ID LSB exp RSB ASSIGN exp .)
    GT              reduce using rule 57 (exp -> ID LSB exp RSB ASSIGN exp .)
    LT              reduce using rule 57 (exp -> ID LSB exp RSB ASSIGN exp .)
    NE              reduce using rule 57 (exp -> ID LSB exp RSB ASSIGN exp .)
    EQ              reduce using rule 57 (exp -> ID LSB exp RSB ASSIGN exp .)
    LE              reduce using rule 57 (exp -> ID LSB exp RSB ASSIGN exp .)
    GE              reduce using rule 57 (exp -> ID LSB exp RSB ASSIGN exp .)
    COLON           reduce using rule 57 (exp -> ID LSB exp RSB ASSIGN exp .)
    COMMA           reduce using rule 57 (exp -> ID LSB exp RSB ASSIGN exp .)
    RSB             reduce using rule 57 (exp -> ID LSB exp RSB ASSIGN exp .)
    RRB             reduce using rule 57 (exp -> ID LSB exp RSB ASSIGN exp .)
    SEMICOLON       reduce using rule 57 (exp -> ID LSB exp RSB ASSIGN exp .)
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49

  ! SUM             [ reduce using rule 57 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! SUB             [ reduce using rule 57 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! DIV             [ reduce using rule 57 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! MOD             [ reduce using rule 57 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! MUL             [ reduce using rule 57 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! AND             [ shift and go to state 50 ]
  ! OR              [ shift and go to state 51 ]
  ! GT              [ shift and go to state 52 ]
  ! LT              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]


state 131

    (35) stmt -> PRINT LRB ID RRB . SEMICOLON

    SEMICOLON       shift and go to state 138


state 132

    (22) exp -> ID LSB exp RSB .
    (57) exp -> ID LSB exp RSB . ASSIGN exp
    (11) iddec -> ID LSB exp RSB .

    SEMICOLON       reduce using rule 22 (exp -> ID LSB exp RSB .)
    SUM             reduce using rule 22 (exp -> ID LSB exp RSB .)
    SUB             reduce using rule 22 (exp -> ID LSB exp RSB .)
    DIV             reduce using rule 22 (exp -> ID LSB exp RSB .)
    MOD             reduce using rule 22 (exp -> ID LSB exp RSB .)
    MUL             reduce using rule 22 (exp -> ID LSB exp RSB .)
    AND             reduce using rule 22 (exp -> ID LSB exp RSB .)
    OR              reduce using rule 22 (exp -> ID LSB exp RSB .)
    GT              reduce using rule 22 (exp -> ID LSB exp RSB .)
    LT              reduce using rule 22 (exp -> ID LSB exp RSB .)
    NE              reduce using rule 22 (exp -> ID LSB exp RSB .)
    EQ              reduce using rule 22 (exp -> ID LSB exp RSB .)
    LE              reduce using rule 22 (exp -> ID LSB exp RSB .)
    GE              reduce using rule 22 (exp -> ID LSB exp RSB .)
    ASSIGN          shift and go to state 117
    COLON           reduce using rule 11 (iddec -> ID LSB exp RSB .)
    COMMA           reduce using rule 11 (iddec -> ID LSB exp RSB .)


state 133

    (49) stmt -> WHILE LRB exp RRB . stmt
    (32) stmt -> . exp SEMICOLON
    (33) stmt -> . block
    (34) stmt -> . vardec
    (35) stmt -> . PRINT LRB ID RRB SEMICOLON
    (48) stmt -> . RETURN exp SEMICOLON
    (49) stmt -> . WHILE LRB exp RRB stmt
    (50) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (51) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (52) stmt -> . FOR LRB ID IN ID RRB stmt
    (53) stmt -> . IF LRB exp RRB stmt elseiflist
    (54) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (29) block -> . LCB stmtlist RCB
    (5) vardec -> . idlist COLON type SEMICOLON
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (9) iddec -> . ID
    (10) iddec -> . ID ASSIGN exp
    (11) iddec -> . ID LSB exp RSB

    PRINT           shift and go to state 91
    RETURN          shift and go to state 93
    WHILE           shift and go to state 94
    ON              shift and go to state 95
    FOR             shift and go to state 96
    IF              shift and go to state 97
    ID              shift and go to state 92
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    LCB             shift and go to state 36
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 88
    stmt                           shift and go to state 139
    block                          shift and go to state 89
    vardec                         shift and go to state 90
    const                          shift and go to state 27
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 134

    (50) stmt -> ON LRB exp RRB . LCB cases RCB SEMICOLON

    LCB             shift and go to state 140


state 135

    (51) stmt -> FOR LRB exp SEMICOLON . exp SEMICOLON exp RRB stmt
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 141
    const                          shift and go to state 27

state 136

    (52) stmt -> FOR LRB ID IN . ID RRB stmt

    ID              shift and go to state 142


state 137

    (53) stmt -> IF LRB exp RRB . stmt elseiflist
    (54) stmt -> IF LRB exp RRB . stmt elseiflist ELSE stmt
    (32) stmt -> . exp SEMICOLON
    (33) stmt -> . block
    (34) stmt -> . vardec
    (35) stmt -> . PRINT LRB ID RRB SEMICOLON
    (48) stmt -> . RETURN exp SEMICOLON
    (49) stmt -> . WHILE LRB exp RRB stmt
    (50) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (51) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (52) stmt -> . FOR LRB ID IN ID RRB stmt
    (53) stmt -> . IF LRB exp RRB stmt elseiflist
    (54) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (29) block -> . LCB stmtlist RCB
    (5) vardec -> . idlist COLON type SEMICOLON
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (9) iddec -> . ID
    (10) iddec -> . ID ASSIGN exp
    (11) iddec -> . ID LSB exp RSB

    PRINT           shift and go to state 91
    RETURN          shift and go to state 93
    WHILE           shift and go to state 94
    ON              shift and go to state 95
    FOR             shift and go to state 96
    IF              shift and go to state 97
    ID              shift and go to state 92
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    LCB             shift and go to state 36
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 88
    stmt                           shift and go to state 143
    block                          shift and go to state 89
    vardec                         shift and go to state 90
    const                          shift and go to state 27
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 138

    (35) stmt -> PRINT LRB ID RRB SEMICOLON .

    RCB             reduce using rule 35 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    PRINT           reduce using rule 35 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    RETURN          reduce using rule 35 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    WHILE           reduce using rule 35 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ON              reduce using rule 35 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FOR             reduce using rule 35 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    IF              reduce using rule 35 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ID              reduce using rule 35 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    SUB             reduce using rule 35 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    LRB             reduce using rule 35 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    NOT             reduce using rule 35 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    LCB             reduce using rule 35 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FLOATNUMBER     reduce using rule 35 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 35 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    TRUE            reduce using rule 35 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FALSE           reduce using rule 35 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ELSE            reduce using rule 35 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ELSEIF          reduce using rule 35 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    WHERE           reduce using rule 35 (stmt -> PRINT LRB ID RRB SEMICOLON .)


state 139

    (49) stmt -> WHILE LRB exp RRB stmt .

    RCB             reduce using rule 49 (stmt -> WHILE LRB exp RRB stmt .)
    PRINT           reduce using rule 49 (stmt -> WHILE LRB exp RRB stmt .)
    RETURN          reduce using rule 49 (stmt -> WHILE LRB exp RRB stmt .)
    WHILE           reduce using rule 49 (stmt -> WHILE LRB exp RRB stmt .)
    ON              reduce using rule 49 (stmt -> WHILE LRB exp RRB stmt .)
    FOR             reduce using rule 49 (stmt -> WHILE LRB exp RRB stmt .)
    IF              reduce using rule 49 (stmt -> WHILE LRB exp RRB stmt .)
    ID              reduce using rule 49 (stmt -> WHILE LRB exp RRB stmt .)
    SUB             reduce using rule 49 (stmt -> WHILE LRB exp RRB stmt .)
    LRB             reduce using rule 49 (stmt -> WHILE LRB exp RRB stmt .)
    NOT             reduce using rule 49 (stmt -> WHILE LRB exp RRB stmt .)
    LCB             reduce using rule 49 (stmt -> WHILE LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 49 (stmt -> WHILE LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 49 (stmt -> WHILE LRB exp RRB stmt .)
    TRUE            reduce using rule 49 (stmt -> WHILE LRB exp RRB stmt .)
    FALSE           reduce using rule 49 (stmt -> WHILE LRB exp RRB stmt .)
    ELSE            reduce using rule 49 (stmt -> WHILE LRB exp RRB stmt .)
    ELSEIF          reduce using rule 49 (stmt -> WHILE LRB exp RRB stmt .)
    WHERE           reduce using rule 49 (stmt -> WHILE LRB exp RRB stmt .)


state 140

    (50) stmt -> ON LRB exp RRB LCB . cases RCB SEMICOLON
    (46) cases -> . cases case
    (47) cases -> .

    RCB             reduce using rule 47 (cases -> .)
    WHERE           reduce using rule 47 (cases -> .)

    cases                          shift and go to state 144

state 141

    (51) stmt -> FOR LRB exp SEMICOLON exp . SEMICOLON exp RRB stmt
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    SEMICOLON       shift and go to state 145
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    LE              shift and go to state 56
    GE              shift and go to state 57


state 142

    (52) stmt -> FOR LRB ID IN ID . RRB stmt

    RRB             shift and go to state 146


state 143

    (53) stmt -> IF LRB exp RRB stmt . elseiflist
    (54) stmt -> IF LRB exp RRB stmt . elseiflist ELSE stmt
    (55) elseiflist -> . elseiflist ELSEIF LRB exp RRB stmt
    (56) elseiflist -> .

    RCB             reduce using rule 56 (elseiflist -> .)
    PRINT           reduce using rule 56 (elseiflist -> .)
    RETURN          reduce using rule 56 (elseiflist -> .)
    WHILE           reduce using rule 56 (elseiflist -> .)
    ON              reduce using rule 56 (elseiflist -> .)
    FOR             reduce using rule 56 (elseiflist -> .)
    IF              reduce using rule 56 (elseiflist -> .)
    ID              reduce using rule 56 (elseiflist -> .)
    SUB             reduce using rule 56 (elseiflist -> .)
    LRB             reduce using rule 56 (elseiflist -> .)
    NOT             reduce using rule 56 (elseiflist -> .)
    LCB             reduce using rule 56 (elseiflist -> .)
    FLOATNUMBER     reduce using rule 56 (elseiflist -> .)
    INTEGERNUMBER   reduce using rule 56 (elseiflist -> .)
    TRUE            reduce using rule 56 (elseiflist -> .)
    FALSE           reduce using rule 56 (elseiflist -> .)
    ELSE            reduce using rule 56 (elseiflist -> .)
    ELSEIF          reduce using rule 56 (elseiflist -> .)
    WHERE           reduce using rule 56 (elseiflist -> .)

    elseiflist                     shift and go to state 147

state 144

    (50) stmt -> ON LRB exp RRB LCB cases . RCB SEMICOLON
    (46) cases -> cases . case
    (45) case -> . WHERE const COLON stmtlist

    RCB             shift and go to state 148
    WHERE           shift and go to state 150

    case                           shift and go to state 149

state 145

    (51) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON . exp RRB stmt
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 151
    const                          shift and go to state 27

state 146

    (52) stmt -> FOR LRB ID IN ID RRB . stmt
    (32) stmt -> . exp SEMICOLON
    (33) stmt -> . block
    (34) stmt -> . vardec
    (35) stmt -> . PRINT LRB ID RRB SEMICOLON
    (48) stmt -> . RETURN exp SEMICOLON
    (49) stmt -> . WHILE LRB exp RRB stmt
    (50) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (51) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (52) stmt -> . FOR LRB ID IN ID RRB stmt
    (53) stmt -> . IF LRB exp RRB stmt elseiflist
    (54) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (29) block -> . LCB stmtlist RCB
    (5) vardec -> . idlist COLON type SEMICOLON
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (9) iddec -> . ID
    (10) iddec -> . ID ASSIGN exp
    (11) iddec -> . ID LSB exp RSB

    PRINT           shift and go to state 91
    RETURN          shift and go to state 93
    WHILE           shift and go to state 94
    ON              shift and go to state 95
    FOR             shift and go to state 96
    IF              shift and go to state 97
    ID              shift and go to state 92
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    LCB             shift and go to state 36
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    stmt                           shift and go to state 152
    exp                            shift and go to state 88
    block                          shift and go to state 89
    vardec                         shift and go to state 90
    const                          shift and go to state 27
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 147

    (53) stmt -> IF LRB exp RRB stmt elseiflist .
    (54) stmt -> IF LRB exp RRB stmt elseiflist . ELSE stmt
    (55) elseiflist -> elseiflist . ELSEIF LRB exp RRB stmt

    RCB             reduce using rule 53 (stmt -> IF LRB exp RRB stmt elseiflist .)
    PRINT           reduce using rule 53 (stmt -> IF LRB exp RRB stmt elseiflist .)
    RETURN          reduce using rule 53 (stmt -> IF LRB exp RRB stmt elseiflist .)
    WHILE           reduce using rule 53 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ON              reduce using rule 53 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FOR             reduce using rule 53 (stmt -> IF LRB exp RRB stmt elseiflist .)
    IF              reduce using rule 53 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ID              reduce using rule 53 (stmt -> IF LRB exp RRB stmt elseiflist .)
    SUB             reduce using rule 53 (stmt -> IF LRB exp RRB stmt elseiflist .)
    LRB             reduce using rule 53 (stmt -> IF LRB exp RRB stmt elseiflist .)
    NOT             reduce using rule 53 (stmt -> IF LRB exp RRB stmt elseiflist .)
    LCB             reduce using rule 53 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FLOATNUMBER     reduce using rule 53 (stmt -> IF LRB exp RRB stmt elseiflist .)
    INTEGERNUMBER   reduce using rule 53 (stmt -> IF LRB exp RRB stmt elseiflist .)
    TRUE            reduce using rule 53 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FALSE           reduce using rule 53 (stmt -> IF LRB exp RRB stmt elseiflist .)
    WHERE           reduce using rule 53 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ELSE            shift and go to state 153
    ELSEIF          shift and go to state 154

  ! ELSE            [ reduce using rule 53 (stmt -> IF LRB exp RRB stmt elseiflist .) ]
  ! ELSEIF          [ reduce using rule 53 (stmt -> IF LRB exp RRB stmt elseiflist .) ]


state 148

    (50) stmt -> ON LRB exp RRB LCB cases RCB . SEMICOLON

    SEMICOLON       shift and go to state 155


state 149

    (46) cases -> cases case .

    RCB             reduce using rule 46 (cases -> cases case .)
    WHERE           reduce using rule 46 (cases -> cases case .)


state 150

    (45) case -> WHERE . const COLON stmtlist
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    const                          shift and go to state 156

state 151

    (51) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp . RRB stmt
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    RRB             shift and go to state 157
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    LE              shift and go to state 56
    GE              shift and go to state 57


state 152

    (52) stmt -> FOR LRB ID IN ID RRB stmt .

    RCB             reduce using rule 52 (stmt -> FOR LRB ID IN ID RRB stmt .)
    PRINT           reduce using rule 52 (stmt -> FOR LRB ID IN ID RRB stmt .)
    RETURN          reduce using rule 52 (stmt -> FOR LRB ID IN ID RRB stmt .)
    WHILE           reduce using rule 52 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ON              reduce using rule 52 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FOR             reduce using rule 52 (stmt -> FOR LRB ID IN ID RRB stmt .)
    IF              reduce using rule 52 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ID              reduce using rule 52 (stmt -> FOR LRB ID IN ID RRB stmt .)
    SUB             reduce using rule 52 (stmt -> FOR LRB ID IN ID RRB stmt .)
    LRB             reduce using rule 52 (stmt -> FOR LRB ID IN ID RRB stmt .)
    NOT             reduce using rule 52 (stmt -> FOR LRB ID IN ID RRB stmt .)
    LCB             reduce using rule 52 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FLOATNUMBER     reduce using rule 52 (stmt -> FOR LRB ID IN ID RRB stmt .)
    INTEGERNUMBER   reduce using rule 52 (stmt -> FOR LRB ID IN ID RRB stmt .)
    TRUE            reduce using rule 52 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FALSE           reduce using rule 52 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ELSE            reduce using rule 52 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ELSEIF          reduce using rule 52 (stmt -> FOR LRB ID IN ID RRB stmt .)
    WHERE           reduce using rule 52 (stmt -> FOR LRB ID IN ID RRB stmt .)


state 153

    (54) stmt -> IF LRB exp RRB stmt elseiflist ELSE . stmt
    (32) stmt -> . exp SEMICOLON
    (33) stmt -> . block
    (34) stmt -> . vardec
    (35) stmt -> . PRINT LRB ID RRB SEMICOLON
    (48) stmt -> . RETURN exp SEMICOLON
    (49) stmt -> . WHILE LRB exp RRB stmt
    (50) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (51) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (52) stmt -> . FOR LRB ID IN ID RRB stmt
    (53) stmt -> . IF LRB exp RRB stmt elseiflist
    (54) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (29) block -> . LCB stmtlist RCB
    (5) vardec -> . idlist COLON type SEMICOLON
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (9) iddec -> . ID
    (10) iddec -> . ID ASSIGN exp
    (11) iddec -> . ID LSB exp RSB

    PRINT           shift and go to state 91
    RETURN          shift and go to state 93
    WHILE           shift and go to state 94
    ON              shift and go to state 95
    FOR             shift and go to state 96
    IF              shift and go to state 97
    ID              shift and go to state 92
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    LCB             shift and go to state 36
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 88
    stmt                           shift and go to state 158
    block                          shift and go to state 89
    vardec                         shift and go to state 90
    const                          shift and go to state 27
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 154

    (55) elseiflist -> elseiflist ELSEIF . LRB exp RRB stmt

    LRB             shift and go to state 159


state 155

    (50) stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .

    RCB             reduce using rule 50 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    PRINT           reduce using rule 50 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    RETURN          reduce using rule 50 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHILE           reduce using rule 50 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ON              reduce using rule 50 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FOR             reduce using rule 50 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    IF              reduce using rule 50 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ID              reduce using rule 50 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    SUB             reduce using rule 50 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LRB             reduce using rule 50 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    NOT             reduce using rule 50 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LCB             reduce using rule 50 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FLOATNUMBER     reduce using rule 50 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 50 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    TRUE            reduce using rule 50 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FALSE           reduce using rule 50 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSE            reduce using rule 50 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSEIF          reduce using rule 50 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHERE           reduce using rule 50 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)


state 156

    (45) case -> WHERE const . COLON stmtlist

    COLON           shift and go to state 160


state 157

    (51) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB . stmt
    (32) stmt -> . exp SEMICOLON
    (33) stmt -> . block
    (34) stmt -> . vardec
    (35) stmt -> . PRINT LRB ID RRB SEMICOLON
    (48) stmt -> . RETURN exp SEMICOLON
    (49) stmt -> . WHILE LRB exp RRB stmt
    (50) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (51) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (52) stmt -> . FOR LRB ID IN ID RRB stmt
    (53) stmt -> . IF LRB exp RRB stmt elseiflist
    (54) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (29) block -> . LCB stmtlist RCB
    (5) vardec -> . idlist COLON type SEMICOLON
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (9) iddec -> . ID
    (10) iddec -> . ID ASSIGN exp
    (11) iddec -> . ID LSB exp RSB

    PRINT           shift and go to state 91
    RETURN          shift and go to state 93
    WHILE           shift and go to state 94
    ON              shift and go to state 95
    FOR             shift and go to state 96
    IF              shift and go to state 97
    ID              shift and go to state 92
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    LCB             shift and go to state 36
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 88
    stmt                           shift and go to state 161
    block                          shift and go to state 89
    vardec                         shift and go to state 90
    const                          shift and go to state 27
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 158

    (54) stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .

    RCB             reduce using rule 54 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    PRINT           reduce using rule 54 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    RETURN          reduce using rule 54 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    WHILE           reduce using rule 54 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ON              reduce using rule 54 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FOR             reduce using rule 54 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    IF              reduce using rule 54 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ID              reduce using rule 54 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    SUB             reduce using rule 54 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    LRB             reduce using rule 54 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    NOT             reduce using rule 54 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    LCB             reduce using rule 54 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FLOATNUMBER     reduce using rule 54 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    INTEGERNUMBER   reduce using rule 54 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    TRUE            reduce using rule 54 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FALSE           reduce using rule 54 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ELSE            reduce using rule 54 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ELSEIF          reduce using rule 54 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    WHERE           reduce using rule 54 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)


state 159

    (55) elseiflist -> elseiflist ELSEIF LRB . exp RRB stmt
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE

    ID              shift and go to state 24
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 162
    const                          shift and go to state 27

state 160

    (45) case -> WHERE const COLON . stmtlist
    (30) stmtlist -> . stmtlist stmt
    (31) stmtlist -> .

    PRINT           reduce using rule 31 (stmtlist -> .)
    RETURN          reduce using rule 31 (stmtlist -> .)
    WHILE           reduce using rule 31 (stmtlist -> .)
    ON              reduce using rule 31 (stmtlist -> .)
    FOR             reduce using rule 31 (stmtlist -> .)
    IF              reduce using rule 31 (stmtlist -> .)
    ID              reduce using rule 31 (stmtlist -> .)
    SUB             reduce using rule 31 (stmtlist -> .)
    LRB             reduce using rule 31 (stmtlist -> .)
    NOT             reduce using rule 31 (stmtlist -> .)
    LCB             reduce using rule 31 (stmtlist -> .)
    FLOATNUMBER     reduce using rule 31 (stmtlist -> .)
    INTEGERNUMBER   reduce using rule 31 (stmtlist -> .)
    TRUE            reduce using rule 31 (stmtlist -> .)
    FALSE           reduce using rule 31 (stmtlist -> .)
    RCB             reduce using rule 31 (stmtlist -> .)
    WHERE           reduce using rule 31 (stmtlist -> .)

    stmtlist                       shift and go to state 163

state 161

    (51) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .

    RCB             reduce using rule 51 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    PRINT           reduce using rule 51 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    RETURN          reduce using rule 51 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    WHILE           reduce using rule 51 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ON              reduce using rule 51 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FOR             reduce using rule 51 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    IF              reduce using rule 51 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ID              reduce using rule 51 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    SUB             reduce using rule 51 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LRB             reduce using rule 51 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    NOT             reduce using rule 51 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LCB             reduce using rule 51 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FLOATNUMBER     reduce using rule 51 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 51 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    TRUE            reduce using rule 51 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FALSE           reduce using rule 51 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELSE            reduce using rule 51 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELSEIF          reduce using rule 51 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    WHERE           reduce using rule 51 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)


state 162

    (55) elseiflist -> elseiflist ELSEIF LRB exp . RRB stmt
    (15) exp -> exp . SUM exp
    (16) exp -> exp . SUB exp
    (17) exp -> exp . DIV exp
    (18) exp -> exp . MOD exp
    (19) exp -> exp . MUL exp
    (58) exp -> exp . AND exp
    (59) exp -> exp . OR exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . LT exp
    (62) exp -> exp . NE exp
    (63) exp -> exp . EQ exp
    (64) exp -> exp . LE exp
    (65) exp -> exp . GE exp

    RRB             shift and go to state 164
    SUM             shift and go to state 45
    SUB             shift and go to state 46
    DIV             shift and go to state 47
    MOD             shift and go to state 48
    MUL             shift and go to state 49
    AND             shift and go to state 50
    OR              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    LE              shift and go to state 56
    GE              shift and go to state 57


state 163

    (45) case -> WHERE const COLON stmtlist .
    (30) stmtlist -> stmtlist . stmt
    (32) stmt -> . exp SEMICOLON
    (33) stmt -> . block
    (34) stmt -> . vardec
    (35) stmt -> . PRINT LRB ID RRB SEMICOLON
    (48) stmt -> . RETURN exp SEMICOLON
    (49) stmt -> . WHILE LRB exp RRB stmt
    (50) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (51) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (52) stmt -> . FOR LRB ID IN ID RRB stmt
    (53) stmt -> . IF LRB exp RRB stmt elseiflist
    (54) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (29) block -> . LCB stmtlist RCB
    (5) vardec -> . idlist COLON type SEMICOLON
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (9) iddec -> . ID
    (10) iddec -> . ID ASSIGN exp
    (11) iddec -> . ID LSB exp RSB

    RCB             reduce using rule 45 (case -> WHERE const COLON stmtlist .)
    WHERE           reduce using rule 45 (case -> WHERE const COLON stmtlist .)
    PRINT           shift and go to state 91
    RETURN          shift and go to state 93
    WHILE           shift and go to state 94
    ON              shift and go to state 95
    FOR             shift and go to state 96
    IF              shift and go to state 97
    ID              shift and go to state 92
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    LCB             shift and go to state 36
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    const                          shift and go to state 27
    stmt                           shift and go to state 87
    exp                            shift and go to state 88
    block                          shift and go to state 89
    vardec                         shift and go to state 90
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 164

    (55) elseiflist -> elseiflist ELSEIF LRB exp RRB . stmt
    (32) stmt -> . exp SEMICOLON
    (33) stmt -> . block
    (34) stmt -> . vardec
    (35) stmt -> . PRINT LRB ID RRB SEMICOLON
    (48) stmt -> . RETURN exp SEMICOLON
    (49) stmt -> . WHILE LRB exp RRB stmt
    (50) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (51) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (52) stmt -> . FOR LRB ID IN ID RRB stmt
    (53) stmt -> . IF LRB exp RRB stmt elseiflist
    (54) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (14) exp -> . ID ASSIGN exp
    (15) exp -> . exp SUM exp
    (16) exp -> . exp SUB exp
    (17) exp -> . exp DIV exp
    (18) exp -> . exp MOD exp
    (19) exp -> . exp MUL exp
    (20) exp -> . const
    (21) exp -> . ID
    (22) exp -> . ID LSB exp RSB
    (23) exp -> . SUB exp
    (24) exp -> . LRB exp RRB
    (57) exp -> . ID LSB exp RSB ASSIGN exp
    (58) exp -> . exp AND exp
    (59) exp -> . exp OR exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp LT exp
    (62) exp -> . exp NE exp
    (63) exp -> . exp EQ exp
    (64) exp -> . exp LE exp
    (65) exp -> . exp GE exp
    (66) exp -> . ID LRB explist RRB
    (67) exp -> . ID LRB RRB
    (68) exp -> . NOT exp
    (29) block -> . LCB stmtlist RCB
    (5) vardec -> . idlist COLON type SEMICOLON
    (25) const -> . FLOATNUMBER
    (26) const -> . INTEGERNUMBER
    (69) const -> . TRUE
    (70) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (9) iddec -> . ID
    (10) iddec -> . ID ASSIGN exp
    (11) iddec -> . ID LSB exp RSB

    PRINT           shift and go to state 91
    RETURN          shift and go to state 93
    WHILE           shift and go to state 94
    ON              shift and go to state 95
    FOR             shift and go to state 96
    IF              shift and go to state 97
    ID              shift and go to state 92
    SUB             shift and go to state 26
    LRB             shift and go to state 28
    NOT             shift and go to state 29
    LCB             shift and go to state 36
    FLOATNUMBER     shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33

    exp                            shift and go to state 88
    stmt                           shift and go to state 165
    block                          shift and go to state 89
    vardec                         shift and go to state 90
    const                          shift and go to state 27
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 165

    (55) elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .

    RCB             reduce using rule 55 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    PRINT           reduce using rule 55 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    RETURN          reduce using rule 55 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    WHILE           reduce using rule 55 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ON              reduce using rule 55 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FOR             reduce using rule 55 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    IF              reduce using rule 55 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ID              reduce using rule 55 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    SUB             reduce using rule 55 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    LRB             reduce using rule 55 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    NOT             reduce using rule 55 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    LCB             reduce using rule 55 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 55 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 55 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    TRUE            reduce using rule 55 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FALSE           reduce using rule 55 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ELSE            reduce using rule 55 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ELSEIF          reduce using rule 55 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    WHERE           reduce using rule 55 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)

