#include <stdio.h>
#include <setjmp.h>

union jmp_buffer_union
{
    jmp_buf env_in_buf;
    struct {
        int env[64];	
    }env_in_int;
}env;

int arr[(int)1e6];
int arr_p = 0;
int stack_p = (int)1e6 - 1;
int val, index;

#define forward_jmp(position)								\
    val = 0;												\
    val=setjmp(env.env_in_buf); 							\
    if(!val)			 									\
        for(index = 0;index < 64;index++)								\
            arr[position + index] = env.env_in_int.env[index]

#define back_jmp(position) 									\
    for(index = 0;index < 64;index++)									\
        env.env_in_int.env[index] = arr[position + index];		\
    longjmp(env.env_in_buf, 1)

int array;
int T0;
int merge_array;
int T1;
int l;
int r;
int T2;
int T3;
int T4;
int T5;
int T6;
int T7;
int T8;
int T9;
int T10;
int T11;
int l1;
int T12;
int T13;
int T14;
int T15;
int T16;
int T17;
int l2;
int mid;
int ll;
int T18;
int T19;
int T20;
int T21;
int T22;
int T23;
int T24;
int T25;
int T26;
int T27;
int T28;
int T29;
int T30;
int T31;
int T32;
int T33;
int T34;
int T35;
int T36;
int T37;
int T38;
int T39;
int T40;
int T41;
int T42;
int T43;
int T44;
int T45;
int T46;
int T47;
int T48;
int T49;
int T50;
int T51;
int T52;
int T53;
int T54;
int T55;
int T56;
int T57;
int T58;
int T59;
int T60;
int T61;
int T62;
int T63;
int T64;
int T65;
int T66;
int i;
int T67;
int T68;
int T69;
int T70;
int T71;
int T72;
int T73;
int T74;
int T75;
int T76;
int T77;
int T78;
int T79;
int T80;
int T81;
int T82;
int T83;
int T84;
int T85;
int T86;
int T87;
int T88;
int T89;
int T90;
int T91;

main()
{
L1: array = arr_p;
arr[arr_p] = 16;
T0 = 16 + 1;
arr_p  = arr_p + T0;
L0: merge_array = arr_p;
arr[arr_p] = 16;
T1 = 16 + 1;
arr_p  = arr_p + T1;
L23: goto L133;
L24: stack_p = stack_p + 1;
arr[arr_p] = arr[stack_p];
arr_p = arr_p + 1;
stack_p = stack_p + 1;
arr[arr_p] = arr[stack_p];
arr_p = arr_p + 1;
arr[stack_p] = l;
stack_p = stack_p - 1;
arr_p = arr_p - 1;
l = arr[arr_p];
arr[stack_p] = r;
stack_p = stack_p - 1;
arr_p = arr_p - 1;
r = arr[arr_p];
L2: if (l != r) goto L7;
L3: goto L25;
L7: T6 = l + 1;
T7 = merge_array + T6;
T3 = l + 1;
T4 = array + T3;
T2 = arr[T4];
arr[T7] = T2;
T5 = arr[T7];
L12: T8 = l + 1;
l = T8;
goto L2;
L25: stack_p = stack_p + 1;
r = arr[stack_p];
stack_p = stack_p + 1;
l = arr[stack_p];
stack_p = stack_p + 1;
T11 = arr[stack_p];
arr[stack_p] = 0;
stack_p = stack_p - 1;
back_jmp(T11);
L133: goto L187;
L134: stack_p = stack_p + 1;
arr[arr_p] = arr[stack_p];
arr_p = arr_p + 1;
stack_p = stack_p + 1;
arr[arr_p] = arr[stack_p];
arr_p = arr_p + 1;
arr[stack_p] = l;
stack_p = stack_p - 1;
arr_p = arr_p - 1;
l = arr[arr_p];
arr[stack_p] = r;
stack_p = stack_p - 1;
arr_p = arr_p - 1;
r = arr[arr_p];
L54: arr[stack_p] = l1;
stack_p = stack_p - 1;
l1 = l;
L45: arr[stack_p] = l2;
stack_p = stack_p - 1;
L34: T12 = l + r;
L40: T15 = T12 / 2;
l2 = T15;
L49: arr[stack_p] = mid;
stack_p = stack_p - 1;
mid = l2;
L53: arr[stack_p] = ll;
stack_p = stack_p - 1;
ll = l;
L55: if (ll < r) goto L57;
L56: goto L135;
L57: if (l1 == mid) goto L66;
L58: goto L65;
L65: T19 = l1 + 1;
T20 = merge_array + T19;
T18 = arr[T20];
T22 = l2 + 1;
T23 = merge_array + T22;
T21 = arr[T23];
L59: if (T18 > T21) goto L66;
L60: goto L100;
L66: if (l2 != r) goto L76;
L67: goto L100;
L76: T28 = ll + 1;
T29 = array + T28;
T25 = l2 + 1;
T26 = merge_array + T25;
T24 = arr[T26];
arr[T29] = T24;
T27 = arr[T29];
L81: T30 = l2 + 1;
l2 = T30;
L91: T33 = ll + 1;
ll = T33;
L124: goto L55;
L100: T40 = ll + 1;
T41 = array + T40;
T37 = l1 + 1;
T38 = merge_array + T37;
T36 = arr[T38];
arr[T41] = T36;
T39 = arr[T41];
L105: T42 = l1 + 1;
l1 = T42;
L115: T45 = ll + 1;
ll = T45;
goto L55;
L135: stack_p = stack_p + 1;
ll = arr[stack_p];
stack_p = stack_p + 1;
mid = arr[stack_p];
stack_p = stack_p + 1;
l2 = arr[stack_p];
stack_p = stack_p + 1;
l1 = arr[stack_p];
stack_p = stack_p + 1;
r = arr[stack_p];
stack_p = stack_p + 1;
l = arr[stack_p];
stack_p = stack_p + 1;
T48 = arr[stack_p];
arr[stack_p] = 0;
stack_p = stack_p - 1;
back_jmp(T48);
L187: goto L191;
L188: stack_p = stack_p + 1;
arr[arr_p] = arr[stack_p];
arr_p = arr_p + 1;
stack_p = stack_p + 1;
arr[arr_p] = arr[stack_p];
arr_p = arr_p + 1;
arr[stack_p] = l;
stack_p = stack_p - 1;
arr_p = arr_p - 1;
l = arr[arr_p];
arr[stack_p] = r;
stack_p = stack_p - 1;
arr_p = arr_p - 1;
r = arr[arr_p];
L141: T49 = r - 1;
L143: if (l < T49) goto L160;
L144: goto L189;
L160: arr[stack_p] = mid;
stack_p = stack_p - 1;
L149: T52 = r + l;
L155: T55 = T52 / 2;
mid = T55;
L165: arr[stack_p] = arr_p;
stack_p = stack_p - 1;
arr[stack_p] = l;
stack_p = stack_p - 1;
L161: arr[stack_p] = mid;
stack_p = stack_p - 1;
L164: T59 = 0;
forward_jmp(arr_p);
L162: if(T59 == 1) goto L163;
arr_p = arr_p + 64;
T59 = 1;
goto L188;
L163: stack_p = stack_p + 1;
T58 = arr[stack_p];
L170: arr[stack_p] = arr_p;
stack_p = stack_p - 1;
arr[stack_p] = mid;
stack_p = stack_p - 1;
L166: arr[stack_p] = r;
stack_p = stack_p - 1;
L169: T61 = 0;
forward_jmp(arr_p);
L167: if(T61 == 1) goto L168;
arr_p = arr_p + 64;
T61 = 1;
goto L188;
L168: stack_p = stack_p + 1;
T60 = arr[stack_p];
L175: arr[stack_p] = arr_p;
stack_p = stack_p - 1;
arr[stack_p] = l;
stack_p = stack_p - 1;
L171: arr[stack_p] = r;
stack_p = stack_p - 1;
L174: T63 = 0;
forward_jmp(arr_p);
L172: if(T63 == 1) goto L173;
arr_p = arr_p + 64;
T63 = 1;
goto L24;
L173: stack_p = stack_p + 1;
T62 = arr[stack_p];
L180: arr[stack_p] = arr_p;
stack_p = stack_p - 1;
arr[stack_p] = l;
stack_p = stack_p - 1;
L176: arr[stack_p] = r;
stack_p = stack_p - 1;
L179: T65 = 0;
forward_jmp(arr_p);
L177: if(T65 == 1) goto L178;
arr_p = arr_p + 64;
T65 = 1;
goto L134;
L178: stack_p = stack_p + 1;
T64 = arr[stack_p];
stack_p = stack_p + 1;
mid = arr[stack_p];
L189: stack_p = stack_p + 1;
r = arr[stack_p];
stack_p = stack_p + 1;
l = arr[stack_p];
stack_p = stack_p + 1;
T66 = arr[stack_p];
arr[stack_p] = 0;
stack_p = stack_p - 1;
back_jmp(T66);
L191: arr[stack_p] = i;
 stack_p = stack_p - 1;
L232: i = 0;
L195: if (i < 16) goto L228;
L196: goto L238;
L228: T80 = i + 1;
T81 = array + T80;
L210: T70 = i * i;
L216: T73 = T70 * i;
L222: T76 = T73 % 62;
arr[T81] = T76;
T79 = arr[T81];
L201: T67 = i + 1;
i = T67;
goto L195;
L238: T82 = array;
T84 = arr[T82];
T83 = T82 + 1;
T85 = T83 + T84;
L235: if (T83 < T85) goto L234;
L236: goto L243;
L234: i = arr[T83];
printf("%d", i);
L237: T83 = T83 + 1;
goto L235;
L243: arr[stack_p] = arr_p;
stack_p = stack_p - 1;
arr[stack_p] = 0;
stack_p = stack_p - 1;
L239: arr[stack_p] = 16;
stack_p = stack_p - 1;
L242: T87 = 0;
forward_jmp(arr_p);
L240: if(T87 == 1) goto L241;
arr_p = arr_p + 64;
T87 = 1;
goto L188;
L241: stack_p = stack_p + 1;
T86 = arr[stack_p];
L249: T88 = array;
T90 = arr[T88];
T89 = T88 + 1;
T91 = T89 + T90;
L246: if (T89 < T91) goto L245;
L247: goto L251;
L245: i = arr[T89];
printf("%d", i);
L248: T89 = T89 + 1;
goto L246;
L251: return 0;
}